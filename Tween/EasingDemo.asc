#define MAX_TWEENGRAPHS 3
int _index;
Tween _tweenX[MAX_TWEENGRAPHS];
Tween _tweenY[MAX_TWEENGRAPHS];

struct _TweenGraph {
  int index;
  int previousX;
  int previousY;
  import function Init(String description, int x, int y, int width, int height, TweenEasingType easingX, TweenEasingType easingY, bool inverseY);
  import function Update();
  import bool IsPlaying();
};

function _TweenGraph::Init(String description, int x, int y, int width, int height, TweenEasingType easingX, TweenEasingType easingY, bool inverseY) {
  _tweenX[this.index].Init(2.5, x + 1, width - 1, easingX);
  this.previousX = x + 1;
  
  if (inverseY) {
     _tweenY[this.index].Init(2.5, height - 1, y + 1, easingY);
     this.previousY = height - 1;
  }
  else {
    _tweenY[this.index].Init(2.5, y + 1, height - 1, easingY);
    this.previousY = y + 1;
  }
  
  DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
  surface.DrawingColor = 8; 
  surface.DrawRectangle(x, y, width, height);
  surface.DrawingColor = 0;
  surface.DrawRectangle(x + 1, y + 1, width - 1, height - 1);
  surface.DrawingColor = 8; 
  surface.DrawString(x + ((width / 2) - (description.Length*9 / 2)), y + 2, Game.SpeechFont, description);
  surface.Release();
}

bool _TweenGraph::IsPlaying() {
  return _tweenX[this.index].IsPlaying() && _tweenY[this.index].IsPlaying();
}

function _TweenGraph::Update() {
  if (this.IsPlaying()) {
    _tweenX[this.index].Update();
    _tweenY[this.index].Update();
    
    DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
    surface.DrawingColor = Game.GetColorFromRGB(
      255,
      FloatToInt(255.0 * _tweenX[this.index].GetProgress(), eRoundNearest),
      0);
    surface.DrawLine(this.previousX, this.previousY, _tweenX[this.index].Value, _tweenY[this.index].Value, 1);
    surface.Release();
    
    this.previousX = _tweenX[this.index].Value;
    this.previousY = _tweenY[this.index].Value;
  }
}

/// --- END _TweenGraph OBJECT --- ///

_TweenGraph _tweenGraphs[MAX_TWEENGRAPHS];
TweenEasingType _easingX;
TweenEasingType _easingY;
String _easingNames[31];

function DrawTweenCurve(int margin, int width, int height) {
  DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
  surface.Clear();
  surface.Release();
  _tweenGraphs[0].Init("Result", margin, margin, width - margin, height / 2, _easingX, _easingY, true);
  if (true) {
    _tweenGraphs[1].Init("X Only", margin, height / 2, width - margin, height - margin / 2 - height / 4, _easingX, eEaseLinearTween,  true);
    _tweenGraphs[2].Init("Y Only", margin, height - margin / 2 - height / 4, width - margin, height - margin, eEaseLinearTween, _easingY, true);
  }
  else {
    _tweenGraphs[1].Init("X Over Time", margin, height / 2, width - margin, height - margin / 2 - height / 4, eEaseLinearTween, _easingX, true);
    _tweenGraphs[2].Init("Y Over Time", margin, height - margin / 2 - height / 4, width - margin, height - margin, eEaseLinearTween, _easingY, true);
  }
}

function UpdateTweenCurve(TweenEasingType easingX, TweenEasingType easingY) {
  if(_easingX == easingX && _easingY == easingY) {
    //return;
  }
  _easingX = easingX;
  _easingY = easingY;
  DrawTweenCurve(20, System.ViewportHeight, System.ViewportHeight);
}

function StartCurve() {
  UpdateTweenCurve(eEaseLinearTween, eEaseLinearTween);
}

function game_start() {
  Tween.IncreaseGameSpeed();
  
  _easingNames[0] = "Linear";
  _easingNames[1] = "InSine";
  _easingNames[2] = "OutSine";
  _easingNames[3] = "InOutSine";
  _easingNames[4] = "InQuad";
  _easingNames[5] = "OutQuad";
  _easingNames[6] = "InOutQuad";
  _easingNames[7] = "InCubic";
  _easingNames[8] = "OutCubic";
  _easingNames[9] = "InOutCubic";
  _easingNames[10] = "InQuart";
  _easingNames[11] = "OutQuart";
  _easingNames[12] = "InOutQuart";
  _easingNames[13] = "InQuint";
  _easingNames[14] = "OutQuint";
  _easingNames[15] = "InOutQuint";
  _easingNames[16] = "InCirc";
  _easingNames[17] = "OutCirc";
  _easingNames[18] = "InOutCirc";
  _easingNames[19] = "InExpo";
  _easingNames[20] = "OutExpo";
  _easingNames[21] = "InOutExpo";
  _easingNames[22] = "InBack";
  _easingNames[23] = "OutBack";
  _easingNames[24] = "InOutBack";
  _easingNames[25] = "InElastic";
  _easingNames[26] = "OutElastic";
  _easingNames[27] = "InOutElastic";
  _easingNames[28] = "InBounce";
  _easingNames[29] = "OutBounce";
  _easingNames[30] = "InOutBounce";

  int i = 0;
  while (i < 31) {
    lstEasingX.AddItem(_easingNames[i]);
    lstEasingY.AddItem(_easingNames[i]);
    i++;
  }
  
  i = 0;
  while (i < MAX_TWEENGRAPHS) {
    _tweenGraphs[i].index = i;
    i++;
  }
}

function repeatedly_execute_always() {
  if (!gEasing.Visible) {
    return;
  }
  
  int i = 0;
  while (i < MAX_TWEENGRAPHS) {
    _tweenGraphs[i].Update();
    i++;
  }
}