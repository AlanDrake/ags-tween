#define NULL_TWEEN_DURATION -1.0
#define HALF_PI (Maths.Pi * 0.5)
#define DOUBLE_PI (Maths.Pi * 2.0)

_Tween _tweens[MAX_TWEENS]; // Stores all the tweens in the game
float _longestTweenDuration = 0.0;

///////////////////////////////////////////////////////////////////////////////
// Utility Functions
///////////////////////////////////////////////////////////////////////////////

#ifdef DEBUG
function _AssertTrue(bool statement, String errorMessage) {
  if (!statement) {
    AbortGame(errorMessage);
  }
}
#endif

/**
 * Gets red value from color integer
 * @param color in AGS-style integer color value
 * @return integer with red value
 */
int GetRFromColor(int color) {
  float floatColor = IntToFloat(color);
  return FloatToInt(floatColor / 2048.0) * 8;
}

/**
 * Gets green value from color integer
 * @param color in AGS-style integer color value
 * @return integer with green value
 */
int GetGFromColor(int color) {
  float floatColor = IntToFloat(color);
  return FloatToInt(( floatColor - IntToFloat(FloatToInt(floatColor / 2048.0) * 2048)) / 64.0) * 8;
}

/**
 * Gets blue value from color integer
 * @param color in AGS-style integer color value
 * @return integer with blue value
 */
int GetBFromColor(int color) {
  float floatColor = IntToFloat(color);
  
  float withoutR = floatColor - IntToFloat(FloatToInt(floatColor / 2048.0) * 2048);
  int withoutRInt = FloatToInt(withoutR);
  
  float withoutG = withoutR - IntToFloat(FloatToInt(withoutR / 64.0) * 64);
  int withoutGInt = FloatToInt(withoutG);
  
  int result = withoutGInt * 8;

  if (result > 255) {
    result = (withoutGInt - 31) * 8 - 1;
  }

  return result;
}

/*
 * Workaround for the following AGS issues with the new audio system:
 * 1. http://www.bigbluecup.com/yabb/index.php?topic=42186.0
 * 2. http://www.bigbluecup.com/yabb/index.php?topic=45071.0
 */
bool ShouldLeaveAudioAlone(AudioChannel *channel) {
  return (channel == null || Game.SkippingCutscene);
}

/**
 * Converts seconds to AGS "loops"
 *
 * @params seconds the number of seconds
 * @return integer value with the number of loops equivalent to that second
 */
int SecondsToLoops(float seconds) {
  return FloatToInt(IntToFloat(GetGameSpeed()) * seconds, eRoundNearest);
}

function WaitSeconds(float seconds) {
  Wait(SecondsToLoops(seconds));
}

function WaitForTweensToStop() {
  if (_longestTweenDuration > 0.0) {
    Wait(FloatToInt(_longestTweenDuration, eRoundUp));
  }
}

float GetDistance(int fromX, int fromY, int toX, int toY) {
  return Maths.Sqrt(
    Maths.RaiseToPower(IntToFloat(toX - fromX), 2.0) + 
    Maths.RaiseToPower(IntToFloat(toY - fromY), 2.0)
  );
}

float SpeedToSeconds(float speed, int fromX, int fromY, int toX, int toY) {
  return GetDistance(fromX, fromY, toX, toY) / speed;
}

/**
 * Linear Interpolation
 *
 * @param from is the start value
 * @param to is the final value
 * @param amount is from 0.0 to 1.0, how far along in the lerp it is
 * @return integer value with the current value
 */
int Lerp(float from, float to, float amount) {
  return FloatToInt(from + (to - from) * amount, eRoundUp);
}

/**
 * Limits an int between a min and max values
 */
int ClampInt(int value, int min, int max) {
  if (value > max) return max;
  else if (value < min) return min;
  
  return value;
}

float _GetTweenRemainingDuration(int index) {
  return _tweens[index].duration - _tweens[index].frameCount;
}

function _CheckIfIsLongestTween(int index) {
  float remainingDuration = _GetTweenRemainingDuration(index);
  
  if (_tweens[index].style != eReverseRepeatTween &&
      _tweens[index].style != eRepeatTween &&
     remainingDuration > _longestTweenDuration) {     
    _longestTweenDuration = remainingDuration;
  }
}
    
float _EaseInSine(float t, float b, float c, float d) {
  return -c * Maths.Cos((t/d) * HALF_PI) + c + b;
}
float _EaseOutSine(float t, float b, float c, float d) {
  return c * Maths.Sin((t/d) * HALF_PI) + b;
}
float _EaseInOutSine(float t, float b, float c, float d) {
  return (-c*0.5) * (Maths.Cos(Maths.Pi*(t/d)) -1.0) + b;
}

float _EaseInPower(float t, float b, float c, float d, float exponent) {
  t = t / d;
  return c*Maths.RaiseToPower(t, exponent) + b;
}
float _EaseOutPower(float t, float b, float c, float d, float exponent) {
  float add = 1.0;
  if (FloatToInt(exponent, eRoundDown) % 2 == 0) {
    c = -c;
    add = -add;
  }
  t = (t / d) - 1.0;
  return c*(Maths.RaiseToPower(t, exponent) + add) + b;
}
float _EaseInOutPower(float t, float b, float c, float d, float exponent) {
  t = t / (d*0.5);
  if (t < 1.0) {
    return (c*0.5)*Maths.RaiseToPower(t, exponent) + b;
  }
  float add = 2.0;
  if (FloatToInt(exponent, eRoundDown) % 2 == 0) {
    c = -c;
    add = -2.0;
  }
  return (c*0.5)*(Maths.RaiseToPower(t - 2.0, exponent) + add) + b;
}

float _EaseInQuad(float t, float b, float c, float d) {
  t = (t / d);
  return c*t*t + b;
}
float _EaseOutQuad(float t, float b, float c, float d) {
  t = (t / d);
  return -c*t*(t-2.0) + b;
}
float _EaseInOutQuad(float t, float b, float c, float d) {
  t = t / (d*0.5);
  if (t < 1.0) {
    return (c*0.5)*t*t + b;
  }
  t = t - 1.0;
  return -(c*0.5)*(t*(t-2.0) - 1.0) + b;
}

float _EaseInExpo(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  return c * Maths.RaiseToPower(2.0, 10.0 * (t/d - 1.0)) + b;
}
float _EaseOutExpo(float t, float b, float c, float d) {
  if (t == d) {
    return b + c;
  }
  return c * (-Maths.RaiseToPower(2.0, -10.0 * (t/d)) + 1.0) + b;
}
float _EaseInOutExpo(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  if (t == d) {
    return b + c;
  }
  t = t / (d*0.5);
  if (t < 1.0) {
    return (c*0.5) * Maths.RaiseToPower(2.0, 10.0 * (t - 1.0)) + b;
  }
  t = t - 1.0;
  return (c*0.5) * (-Maths.RaiseToPower(2.0, -10.0 * t) + 2.0) + b;
}

float _EaseInCirc(float t, float b, float c, float d) {
  t = t / d;
  return -c * (Maths.Sqrt(1.0 - t*t) - 1.0) + b;
}
float _EaseOutCirc(float t, float b, float c, float d) {
  t = t / d - 1.0;
  return c * Maths.Sqrt(1.0 - t*t) + b;
}
float _EaseInOutCirc(float t, float b, float c, float d) {
  t = t / (d*0.5);
  if (t < 1.0) {
    return -(c*0.5) * (Maths.Sqrt(1.0 - t*t) - 1.0) + b;
  }
  t = t - 2.0;
  return (c*0.5) * (Maths.Sqrt(1.0 - t*t) + 1.0) + b;
}

float _EaseInBack(float t, float b, float c, float d) {  
  float s = 1.70158;
  t = (t / d);
  return c*t*t*((s+1.0)*t - s) + b;
}
float _EaseOutBack(float t, float b, float c, float d) {
  float s = 1.70158;
  t = (t / d) - 1.0;
  return c*(t*t*((s+1.0)*t + s) + 1.0) + b;
}
float _EaseInOutBack(float t, float b, float c, float d) {
  float s = 1.70158;
  t = t / (d / 2.0);
  s = s * 1.525;
  if (t < 1.0) {
    return (c/2.0)*(t*t*((s+1.0)*t - s)) + b;
  }
  t = t - 2.0;
  return (c/2.0)*(t*t*((s+1.0)*t + s) + 2.0) + b;
}

float _EaseOutBounce(float t, float b, float c, float d) {
  t = t / d;
  if (t < (1.0 / 2.75)) {
    return c*(7.5625*t*t) + b;
  }
  else if (t < (2.0 / 2.75)) {
    t = t - (1.5 / 2.75);
    return c*(7.5625*t*t + 0.75) + b;
  }
  else if (t < (2.5 / 2.75)) {
    t = t - (2.25 / 2.75);
    return c*(7.5625*t*t + 0.9375) + b;
  }
  
  t = t - (2.625 / 2.75);
  return c*(7.5625*t*t + 0.984375) + b;
}
float _EaseInBounce(float t, float b, float c, float d) {
  return c - _EaseOutBounce(d - t, 0.0, c, d) + b;
}
float _EaseInOutBounce(float t, float b, float c, float d) {
  if (t < (d / 2.0)) {
    return _EaseInBounce(t * 2.0, 0.0, c, d) * 0.5 + b;
  }
  return (_EaseOutBounce((t * 2.0) - d, 0.0, c, d) * 0.5) + (c*0.5) + b;
}

float _EaseInElastic(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  t = t / d;
  if (t == 1.0) {
    return b + c;
  }
  float p = d * 0.3;
  float s = p / 4.0;
  t = t - 1.0;
  
  return -(c*Maths.RaiseToPower(2.0, 10.0*t) * Maths.Sin(((t*d - s)*DOUBLE_PI) / p)) + b;
}
float _EaseOutElastic(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  t = t / d;
  if (t == 1.0) {
    return b + c;
  }
  float p = d * 0.3;
  float s = p / 4.0;

  return ((c*Maths.RaiseToPower(2.0, -10.0*t)) * Maths.Sin(((t*d - s)*DOUBLE_PI / p)) + c + b);
}
float _EaseInOutElastic(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  t = t / (d * 0.5);
  if (t == 2.0) {
    return b + c;
  }
  
  float p = d * (0.3 * 1.5);
  float s = p / 4.0;
  if (t < 1.0) {
    t = t - 1.0;
    return -0.5*(c*Maths.RaiseToPower(2.0, 10.0*t) * Maths.Sin(((t*d - s)*DOUBLE_PI) / p)) + b;
  }
  t = t - 1.0;
  return c*Maths.RaiseToPower(2.0, -10.0*t) * Maths.Sin(((t*d - s)*DOUBLE_PI) / p)*0.5 + c + b;
}

float _ComputeTiming(float elapsed, float duration, TweenTiming timingType) {
  float timing;
  
  if (timingType == eLinearTween) {
    timing = elapsed / duration;
  }
  if (timingType == eEaseInTween) {
    timing = elapsed / duration;
    float timing2 = Maths.RaiseToPower(timing, 2.0);
    timing = ((3.0 * timing2) - (timing2 * timing)) * 0.5;
  }
  else if (timingType == eEaseOutTween) {
    timing = elapsed / duration;
    float timing2 = Maths.RaiseToPower(timing, 2.0);
    timing = ((3.0 * timing) - (timing2 * timing)) * 0.5;
  }
  else if (timingType == eEaseInEaseOutTween) {
    timing = elapsed / duration;
    float timing2 = Maths.RaiseToPower(timing, 2.0);
    timing = (3.0 * timing2) - (2.0 * timing * timing2);
  }
  else if (timingType == eEaseInSineTween) {
    timing = _EaseInSine(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseOutSineTween) {
    timing = _EaseOutSine(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInOutSineTween) {
    timing = _EaseInOutSine(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInCubicTween) {
    timing = _EaseInPower(elapsed, 0.0, 1.0, duration, 3.0);
  }
  else if (timingType == eEaseOutCubicTween) {
    timing = _EaseOutPower(elapsed, 0.0, 1.0, duration, 3.0);
  }
  else if (timingType == eEaseInOutCubicTween) {
    timing = _EaseInOutPower(elapsed, 0.0, 1.0, duration, 3.0);
  }
  else if (timingType == eEaseInQuartTween) {
    timing = _EaseInPower(elapsed, 0.0, 1.0, duration, 4.0);
  }
  else if (timingType == eEaseOutQuartTween) {
    timing = _EaseOutPower(elapsed, 0.0, 1.0, duration, 4.0);
  }
  else if (timingType == eEaseInOutQuartTween) {
    timing = _EaseInOutPower(elapsed, 0.0, 1.0, duration, 4.0);
  }
  else if (timingType == eEaseInQuintTween) {
    timing = _EaseInPower(elapsed, 0.0, 1.0, duration, 5.0);
  }
  else if (timingType == eEaseOutQuintTween) {
    timing = _EaseOutPower(elapsed, 0.0, 1.0, duration, 5.0);
  }
  else if (timingType == eEaseInOutQuintTween) {
    timing = _EaseInOutPower(elapsed, 0.0, 1.0, duration, 5.0);
  }
  else if (timingType == eEaseInQuadTween) {
    timing = _EaseInQuad(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseOutQuadTween) {
    timing = _EaseOutQuad(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInOutQuadTween) {
    timing = _EaseInOutQuad(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInExpoTween) {
    timing = _EaseInExpo(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseOutExpoTween) {
    timing = _EaseOutExpo(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInOutExpoTween) {
    timing = _EaseInOutExpo(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInCircTween) {
    timing = _EaseInCirc(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseOutCircTween) {
    timing = _EaseOutCirc(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInOutCircTween) {
    timing = _EaseInOutCirc(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInBackTween) {
    timing = _EaseInBack(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseOutBackTween) {
    timing = _EaseOutBack(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInOutBackTween) {
    timing = _EaseInOutBack(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInElasticTween) {
    timing = _EaseInElastic(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseOutElasticTween) {
    timing = _EaseOutElastic(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInOutElasticTween) {
    timing = _EaseInOutElastic(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInBounceTween) {
    timing = _EaseInBounce(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseOutBounceTween) {
    timing = _EaseOutBounce(elapsed, 0.0, 1.0, duration);
  }
  else if (timingType == eEaseInOutBounceTween) {
    timing = _EaseInOutBounce(elapsed, 0.0, 1.0, duration);
  }

  return timing;
}

function _ReverseTween(short i) {
    float fromX = _tweens[i].toX;
    float fromY = _tweens[i].toY;
    _tweens[i].toX = _tweens[i].fromX;
    _tweens[i].toY = _tweens[i].fromY;
    _tweens[i].fromX = fromX;
    _tweens[i].fromY = fromY;
    
    TweenTiming timing = _tweens[i].timing;
    if (timing == eEaseOutTween) {
      timing = eEaseInTween;
    }
    else if (timing == eEaseInTween) {
      timing = eEaseOutTween;
    }
    else if (timing == eEaseOutSineTween) {
      timing = eEaseInSineTween;
    }
    else if (timing == eEaseInSineTween) {
      timing = eEaseOutSineTween;
    }
    else if (timing == eEaseOutCubicTween) {
      timing = eEaseInCubicTween;
    }
    else if (timing == eEaseInCubicTween) {
      timing = eEaseOutCubicTween;
    }
    else if (timing == eEaseOutQuadTween) {
      timing = eEaseInQuadTween;
    }
    else if (timing == eEaseInQuadTween) {
      timing = eEaseOutQuadTween;
    }
    else if (timing == eEaseOutQuintTween) {
      timing = eEaseInQuintTween;
    }
    else if (timing == eEaseInQuintTween) {
      timing = eEaseOutQuintTween;
    }
    else if (timing == eEaseOutQuartTween) {
      timing = eEaseInQuartTween;
    }
    else if (timing == eEaseInQuartTween) {
      timing = eEaseOutQuartTween;
    }
    else if (timing == eEaseOutExpoTween) {
      timing = eEaseInExpoTween;
    }
    else if (timing == eEaseInExpoTween) {
      timing = eEaseOutExpoTween;
    }
    else if (timing == eEaseOutCircTween) {
      timing = eEaseInCircTween;
    }
    else if (timing == eEaseInCircTween) {
      timing = eEaseOutCircTween;
    }
    else if (timing == eEaseOutElasticTween) {
      timing = eEaseInElasticTween;
    }
    else if (timing == eEaseInElasticTween) {
      timing = eEaseOutElasticTween;
    }
    else if (timing == eEaseOutBounceTween) {
      timing = eEaseInBounceTween;
    }
    else if (timing == eEaseInBounceTween) {
      timing = eEaseOutBounceTween;
    }
    else if (timing == eEaseOutBackTween) {
      timing = eEaseInBackTween;
    }
    else if (timing == eEaseInBackTween) {
      timing = eEaseOutBackTween;
    }
    
    _tweens[i].timing = timing;
}

///////////////////////////////////////////////////////////////////////////////
// Tween Internal Step
///////////////////////////////////////////////////////////////////////////////

/**
 * Where the magic happens, the tween gets updated here.
 * @param amount is from 0.0 to 1.0
 */
function _Tween::Step(float amount) {  
  // GUI step
  if (this.type == _eTweenGUIPosition) {
    gui[this.refID].SetPosition(Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount));
  }
  if (this.type == _eTweenGUISize) {
    gui[this.refID].SetSize(Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount));
  }
  else if (this.type == _eTweenGUITransparency) {
    // Workaround for Popup Modal GUIs. If the scripter is fading this in, then make it vsible.
    GUI* refGUI = gui[this.refID];
    if (this.frameCount == 0.0 && refGUI.Visible == false && refGUI.Transparency == 100) {
      refGUI.Visible = true;
    }

    refGUI.Transparency = ClampInt(Lerp(this.fromX, this.toX, amount), 0, 100);

    // Workaround for Popup Modal GUIs. If the scripter is fading this out, then make it invisble.
    if (this.frameCount == this.duration && refGUI.Visible == true && refGUI.Transparency == 100) {
      refGUI.Visible = false;
    }
  }
  else if (this.type == _eTweenGUIZOrder) {
    gui[this.refID].ZOrder = Lerp(this.fromX, this.toX, amount);
  }
  // OBJECT step
  else if (this.type == _eTweenObjectPosition) {
    object[this.refID].SetPosition(Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount));
  }
  else if (this.type == _eTweenObjectTransparency) {
    Object *objectRef = object[this.refID];
    if (this.frameCount == 0.0 && objectRef.Visible == false && objectRef.Transparency == 100) {
      objectRef.Visible = true;
    }
    
    objectRef.Transparency = ClampInt(Lerp(this.fromX, this.toX, amount), 0, 100);

    if (this.frameCount == this.duration && objectRef.Visible == true && objectRef.Transparency == 100) {
      objectRef.Visible = false;
    }
  }
  // CHARACTER step
  else if (this.type == _eTweenCharacterPosition) {
    character[this.refID].x = Lerp(this.fromX, this.toX, amount);
    character[this.refID].y = Lerp(this.fromY, this.toY, amount);
  }
  else if (this.type == _eTweenCharacterScaling) {
    character[this.refID].Scaling = ClampInt(Lerp(this.fromX, this.toX, amount), 5, 200);
  }
  else if (this.type == _eTweenCharacterTransparency) {
    character[this.refID].Transparency = ClampInt(Lerp(this.fromX, this.toX, amount), 0, 100);
  }
  else if (this.type == _eTweenCharacterAnimationSpeed) {
    character[this.refID].AnimationSpeed = Lerp(this.fromX, this.toX, amount);
  }
  // REGION step
  else if (this.type == _eTweenRegionLightLevel) {
    region[this.refID].LightLevel = Lerp(this.fromX, this.toX, amount);
  }
  else if (this.type == _eTweenRegionTintRed) {
    int saturation = region[this.refID].TintSaturation;
    if (saturation < 0) saturation = 0;
    region[this.refID].Tint(Lerp(this.fromX, this.toX, amount), region[this.refID].TintGreen, region[this.refID].TintBlue, saturation);
  }
  else if (this.type == _eTweenRegionTintGreen) {
    int saturation = region[this.refID].TintSaturation;
    if (saturation < 0) saturation = 0;
    region[this.refID].Tint(region[this.refID].TintRed, Lerp(this.fromX, this.toX, amount), region[this.refID].TintBlue, saturation);
  }
  else if (this.type == _eTweenRegionTintBlue) {
    int saturation = region[this.refID].TintSaturation;
    if (saturation < 0) saturation = 0;
    region[this.refID].Tint(region[this.refID].TintRed, region[this.refID].TintGreen, Lerp(this.fromX, this.toX, amount), saturation);
  }
  else if (this.type == _eTweenRegionTintSaturation) {
    int saturation = Lerp(this.fromX, this.toX, amount);
    if (saturation < 0) saturation = 0;
    region[this.refID].Tint(region[this.refID].TintRed, region[this.refID].TintGreen, region[this.refID].TintBlue, saturation);
  }
  // GUICONTROL step
  else if (this.type == _eTweenGUIControlPosition) {
    this.guiControlRef.SetPosition(Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount));
  }
  else if (this.type == _eTweenGUIControlSize) {
    this.guiControlRef.SetSize(Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount));
  }
  // LABEL step
  else if (this.type == _eTweenLabelTextColor) {
    this.guiControlRef.AsLabel.TextColor = Lerp(this.fromX, this.toX, amount);
  }
  else if (this.type == _eTweenLabelTextColorRed) {
    this.guiControlRef.AsLabel.TextColor = Game.GetColorFromRGB(Lerp(this.fromX, this.toX, amount), GetGFromColor(this.guiControlRef.AsLabel.TextColor), GetBFromColor(this.guiControlRef.AsLabel.TextColor));
  }
  else if (this.type == _eTweenLabelTextColorGreen) {
    this.guiControlRef.AsLabel.TextColor = Game.GetColorFromRGB(GetRFromColor(this.guiControlRef.AsLabel.TextColor), Lerp(this.fromX, this.toX, amount), GetBFromColor(this.guiControlRef.AsLabel.TextColor));
  }
  else if (this.type == _eTweenLabelTextColorBlue) {
    this.guiControlRef.AsLabel.TextColor = Game.GetColorFromRGB(GetRFromColor(this.guiControlRef.AsLabel.TextColor), GetGFromColor(this.guiControlRef.AsLabel.TextColor), Lerp(this.fromX, this.toX, amount));
  }
  // BUTTON step
  else if (this.type == _eTweenButtonTextColor) {
    this.guiControlRef.AsButton.TextColor = Lerp(this.fromX, this.toX, amount);
  }
  else if (this.type == _eTweenButtonTextColorRed) {
    this.guiControlRef.AsButton.TextColor = Game.GetColorFromRGB(Lerp(this.fromX, this.toX, amount), GetGFromColor(this.guiControlRef.AsLabel.TextColor), GetBFromColor(this.guiControlRef.AsLabel.TextColor));
  }
  else if (this.type == _eTweenButtonTextColorRed) {
    this.guiControlRef.AsButton.TextColor = Game.GetColorFromRGB(Lerp(this.fromX, this.toX, amount), GetGFromColor(this.guiControlRef.AsButton.TextColor), GetBFromColor(this.guiControlRef.AsButton.TextColor));
  }
  else if (this.type == _eTweenButtonTextColorGreen) {
    this.guiControlRef.AsButton.TextColor = Game.GetColorFromRGB(GetRFromColor(this.guiControlRef.AsButton.TextColor), Lerp(this.fromX, this.toX, amount), GetBFromColor(this.guiControlRef.AsButton.TextColor));
  }
  else if (this.type == _eTweenButtonTextColorBlue) {
    this.guiControlRef.AsButton.TextColor = Game.GetColorFromRGB(GetRFromColor(this.guiControlRef.AsButton.TextColor), GetGFromColor(this.guiControlRef.AsButton.TextColor), Lerp(this.fromX, this.toX, amount));
  }
  // TEXTBOX step
#ifver 3.1
  else if (this.type == _eTweenTextBoxTextColor) {
    this.guiControlRef.AsTextBox.TextColor = Lerp(this.fromX, this.toX, amount);
  }
  else if (this.type == _eTweenTextBoxTextColorRed) {
    this.guiControlRef.AsTextBox.TextColor = Game.GetColorFromRGB(Lerp(this.fromX, this.toX, amount), GetGFromColor(this.guiControlRef.AsTextBox.TextColor), GetBFromColor(this.guiControlRef.AsTextBox.TextColor));
  }
  else if (this.type == _eTweenTextBoxTextColorGreen) {
    this.guiControlRef.AsTextBox.TextColor = Game.GetColorFromRGB(GetRFromColor(this.guiControlRef.AsTextBox.TextColor), Lerp(this.fromX, this.toX, amount), GetBFromColor(this.guiControlRef.AsTextBox.TextColor));
  }
  else if (this.type == _eTweenTextBoxTextColorBlue) {
    this.guiControlRef.AsTextBox.TextColor = Game.GetColorFromRGB(GetRFromColor(this.guiControlRef.AsTextBox.TextColor), GetGFromColor(this.guiControlRef.AsTextBox.TextColor), Lerp(this.fromX, this.toX, amount));
  }
#endif
  // LISTBOX step
  else if (this.type == _eTweenListBoxSelectedIndex) {
    this.guiControlRef.AsListBox.SelectedIndex = Lerp(this.fromX, this.toX, amount);
  }
  else if (this.type == _eTweenListBoxTopItem) {
    this.guiControlRef.AsListBox.TopItem = Lerp(this.fromX, this.toX, amount);
  }
  // SLIDER step
  else if (this.type == _eTweenSliderValue) {
    this.guiControlRef.AsSlider.Value =  Lerp(this.fromX, this.toX, amount);
  }
#ifver 3.1
  else if (this.type == _eTweenSliderHandleOffset) {
    this.guiControlRef.AsSlider.HandleOffset = Lerp(this.fromX, this.toX, amount);
  }
#endif
  // INVWINDOW step
  else if (this.type == _eTweenInvWindowTopItem) {
    this.guiControlRef.AsInvWindow.TopItem = Lerp(this.fromX, this.toX, amount);
  }
  // MISC step
  else if (this.type == _eTweenViewportX) {
    SetViewport(Lerp(this.fromX, this.toX, amount), GetViewportY());
  }
  else if (this.type == _eTweenViewportY) {
    SetViewport(GetViewportX(), Lerp(this.fromY, this.toY, amount));
  }
  else if (this.type == _eTweenViewportXY) {
    SetViewport(Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount));
  }
  else if (this.type == _eTweenGamma) {
    System.Gamma = Lerp(this.fromX, this.toX, amount);
  }
  else if (this.type == _eTweenShakeScreen) {
    ShakeScreenBackground(Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount), 1);
  }
  else if (this.type == _eTweenAreaScaling) {
    SetAreaScaling(this.refID, Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount));
  }
  // AUDIO step
  else if (this.type == _eTweenSpeechVolume) {
    SetSpeechVolume(Lerp(this.fromX, this.toX, amount));
  }
  // Pre AGS 3.2 strict audio
#ifndef STRICT_AUDIO
  else if (this.type == _eTweenMusicMasterVolume) {
    SetMusicMasterVolume(Lerp(this.fromX, this.toX, amount));
  }
  else if (this.type == _eTweenDigitalMasterVolume) {
    SetDigitalMasterVolume(Lerp(this.fromX, this.toX, amount));
  }
  else if (this.type == _eTweenSoundVolume) {
    SetSoundVolume(Lerp(this.fromX, this.toX, amount));
  }
  else if (this.type == _eTweenChannelVolume) {
    SetChannelVolume(this.refID, Lerp(this.fromX, this.toX, amount));
  }
#endif
  // AGS 3.2+ strict audio
#ifdef STRICT_AUDIO
  else if (this.type == _eTweenSystemVolume) {
    System.Volume = Lerp(this.fromX, this.toX, amount);
  }
  else if (this.type == _eTweenAudioChannelVolume) {
    AudioChannel* channel = System.AudioChannels[this.refID];
    if (ShouldLeaveAudioAlone(channel)) return;
    channel.Volume = Lerp(this.fromX, this.toX, amount);
  }
  else if (this.type == _eTweenAudioChannelRoomLocation) {
    AudioChannel* channel = System.AudioChannels[this.refID];
    if (ShouldLeaveAudioAlone(channel)) return;
    channel.SetRoomLocation(Lerp(this.fromX, this.toX, amount), Lerp(this.fromY, this.toY, amount));
  }
  else if (this.type == _eTweenAudioChannelPanning) {
    AudioChannel* channel = System.AudioChannels[this.refID];
    if (ShouldLeaveAudioAlone(channel)) return;
    channel.Panning = Lerp(this.fromX, this.toX, amount);
  }
#endif
}

/**
 * Resets and stops all the tweens
 */
function _CleanupTweens() {
  short i = 0;

  while (i < MAX_TWEENS) {
    if (_tweens[i].duration != NULL_TWEEN_DURATION) {
      _tweens[i].Step(0.0);
      _tweens[i].duration = NULL_TWEEN_DURATION;
    }

    i++;
  }
}

///////////////////////////////////////////////////////////////////////////////
// AGS Events
///////////////////////////////////////////////////////////////////////////////

function game_start() {
  // Initialize all the internal tween data on game start
  short i = 0;
  while (i < MAX_TWEENS) {
    _tweens[i].duration = NULL_TWEEN_DURATION;
    i++;
  }
}

float previousTime = 0.0;

function repeatedly_execute_always() {
  // Steps through every active tween
  short i = 0;

  _longestTweenDuration = 0.0;
  while (i < MAX_TWEENS) {
    if (_tweens[i].duration > 0.0) {
      // Compute the amount based on the timing type
      float amount = _ComputeTiming(
        _tweens[i].frameCount,
        _tweens[i].duration,
        _tweens[i].timing
        );

      // Update the tween
      _tweens[i].Step(amount);
      _tweens[i].frameCount++;

      // Repeat tween if needed
      if (_tweens[i].frameCount >= _tweens[i].duration) {
        if (_tweens[i].style == eRepeatTween) {
          _tweens[i].frameCount = 0.0;
        }
        else if (_tweens[i].style == eReverseRepeatTween) {
          _ReverseTween(i);
          _tweens[i].frameCount = 0.0;
        }
        else {
          _tweens[i].duration = NULL_TWEEN_DURATION;
        }
      }
      else {
        _CheckIfIsLongestTween(i);
      }
    }

    i++;
  }
}

function on_event(EventType event, int data) {
  if (event == eEventLeaveRoom) {
    // If the player leaves the room, reset and stop tweens
    _CleanupTweens();
  }
}

///////////////////////////////////////////////////////////////////////////////
// Tween Construction
///////////////////////////////////////////////////////////////////////////////

/*
 * Finds and returns an available tween spot
 *
 * @return integer index in the _tweens array that is available.
 */
int _GetAvailableTweenSpot() {
  short i = 0;
  short spot = -1;

  // Pretty simple linear search for an available spot
  while (i < MAX_TWEENS && spot == -1) {
    if (_tweens[i].duration == NULL_TWEEN_DURATION) {
      spot = i;
    }

    i++;
  }

#ifdef DEBUG
  // Let the scripter know that tweens are maxed out, but ignore it completely in the non-debug version.
  _AssertTrue(spot >= 0, String.Format("Cannot create new tween because the Tween module is currently playing %d tween(s), which is the maximum. You can increase this max number on the Tween module script header.", MAX_TWEENS));
#endif

  return spot;
}

// Internal
// Creates and starts a new tween
int _StartTween(_TweenType type, float seconds, short toX, short toY, short fromX, short fromY,
  _TweenReferenceType refType, int refID, GUIControl* guiControlRef, TweenTiming timing, TweenStyle style) {
  
  short index = _GetAvailableTweenSpot();
  
#ifdef DEBUG
  // Make sure the index is good. This should not happen to scripters ever.
  _AssertTrue(index >= 0 && index < MAX_TWEENS, "Cannot create Tween. Invalid index!");
#endif

  _tweens[index].type = type;
  _tweens[index].toX = IntToFloat(toX);
  _tweens[index].toY = IntToFloat(toY);
  _tweens[index].fromX = IntToFloat(fromX);
  _tweens[index].fromY = IntToFloat(fromY);
  _tweens[index].refType = refType;
  _tweens[index].refID = refID;
  _tweens[index].guiControlRef = guiControlRef;
  _tweens[index].duration = IntToFloat(SecondsToLoops(seconds));
  _tweens[index].frameCount = 0.0;
  _tweens[index].timing = timing;
  _tweens[index].style = style;
  
  _CheckIfIsLongestTween(index);

  if (_tweens[index].style == eBlockTween) {
    Wait(FloatToInt(_tweens[index].duration + 1.0, eRoundUp));
  }
  else {
    return FloatToInt(_tweens[index].duration + 1.0, eRoundUp);
  }

  return 1;
}

// Internal
// Tween "constructors"
int _StartGUITween(_TweenType type, float seconds, short toX, short toY, short fromX, short fromY,
    GUI* guiRef, TweenTiming timing, TweenStyle style) {
  return _StartTween(type, seconds, toX, toY, fromX, fromY, _eTweenReferenceGUI, guiRef.ID, null, timing, style);
}
int _StartGUITweenBySpeed(_TweenType type, float speed, short toX, short toY, short fromX, short fromY,
    GUI* guiRef, TweenTiming timing, TweenStyle style) {
  return _StartGUITween(type, SpeedToSeconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, guiRef, timing, style);
}

int _StartObjectTween(_TweenType type, float seconds, short toX, short toY, short fromX, short fromY,
    Object* objectRef, TweenTiming timing, TweenStyle style) {
  return _StartTween(type, seconds, toX, toY, fromX, fromY, _eTweenReferenceObject, objectRef.ID, null, timing, style);
}
int _StartObjectTweenBySpeed(_TweenType type, float speed, short toX, short toY, short fromX, short fromY,
    Object* objectRef, TweenTiming timing, TweenStyle style) {
  return _StartObjectTween(type, SpeedToSeconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, objectRef, timing, style);
}

int _StartCharacterTween(_TweenType type, float seconds, short toX, short toY, short fromX, short fromY,
    Character* characterRef, TweenTiming timing, TweenStyle style) {
  return _StartTween(type, seconds, toX, toY, fromX, fromY, _eTweenReferenceCharacter, characterRef.ID, null, timing, style);
}
int _StartCharacterTweenBySpeed(_TweenType type, float speed, short toX, short toY, short fromX, short fromY,
    Character* characterRef, TweenTiming timing, TweenStyle style) {
  return _StartCharacterTween(type, SpeedToSeconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, characterRef, timing, style);
}

int _StartRegionTween(_TweenType type, float seconds, short toX, short toY, short fromX, short fromY,
    Region* regionRef, TweenTiming timing, TweenStyle style) {
  return _StartTween(type, seconds, toX, toY, fromX, fromY, _eTweenReferenceRegion, regionRef.ID, null, timing, style);
}

int _StartGUIControlTween(_TweenType type, float seconds, short toX, short toY, short fromX, short fromY,
    GUIControl* guiControlRef, TweenTiming timing, TweenStyle style) {
  return _StartTween(type, seconds, toX, toY, fromX, fromY, _eTweenReferenceGUIControl, 0, guiControlRef, timing, style);
}
int _StartGUIControlTweenBySpeed(_TweenType type, float speed, short toX, short toY, short fromX, short fromY,
    GUIControl* guiControlRef, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(type, SpeedToSeconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, guiControlRef, timing, style);
}

int _StartMiscTween(_TweenType type, float seconds, short toX, short toY, short fromX, short fromY, int id,
    TweenTiming timing, TweenStyle style) {
  return _StartTween(type, seconds, toX, toY, fromX, fromY, _eTweenReferenceMisc, id, null, timing, style);
}
int _StartMiscTweenBySpeed(_TweenType type, float speed, short toX, short toY, short fromX, short fromY, int id,
    TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(type, SpeedToSeconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, id, timing, style);
}

///////////////////////////////////////////////////////////////////////////////
// Tween Stoppers
///////////////////////////////////////////////////////////////////////////////

/**
  * Stops a tween
  *
  * @param index which tween in the _tweens array to stop
  * @param result how to stop the tween:
  *   ePauseTween will leave it as it is
  *   eFinishTween will carry it to the end
  *   eResetTween will bring it back to where it was
  */
function _StopTween(short index, TweenStopResult result) {
  if (_tweens[index].duration != NULL_TWEEN_DURATION) {
    if (result == eFinishTween) {
      _tweens[index].Step(1.0);
    }
    else if (result == eResetTween) {
      _tweens[index].Step(0.0);
    }
    
    _tweens[index].duration = NULL_TWEEN_DURATION;
  }
}

// Internal Function, stops all tweens for a particular ags object
function _StopTweens(_TweenReferenceType refType, int refID, TweenStopResult result) {
  short i = 0;
  while (i < MAX_TWEENS) {
    if (_tweens[i].refType == refType && _tweens[i].refID == refID) {
      _StopTween(i, result);
    }
    i++;
  }
}

function _StopTweensForGUIControl(GUIControl* guiControlRef, TweenStopResult result) {
  short i = 0;
  while (i < MAX_TWEENS) {
    if (_tweens[i].guiControlRef == guiControlRef) {
      _StopTween(i, result);
    }
    i++;
  }
}

function TweenStopAll(TweenStopResult result) {
  short i = 0;
  while (i < MAX_TWEENS) {
    _StopTween(i, result);
    i++;
  }
}

///////////////////////////////////////////////////////////////////////////////
// Public Tween Functions
///////////////////////////////////////////////////////////////////////////////

// MISC Tweens
int TweenViewportX(float seconds, short toX, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenViewportX, seconds, toX, 0, GetViewportX(), 0, 0, timing, style);
}
int TweenViewportY(float seconds, short toY, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenViewportY, seconds, 0, toY, 0, GetViewportY(), 0, timing, style);
}
int TweenViewportXBySpeed(float speed, short toX, TweenTiming timing, TweenStyle style) {
  return _StartMiscTweenBySpeed(_eTweenViewportX, speed, toX, 0, GetViewportX(), 0, 0, timing, style);
}
int TweenViewportYBySpeed(float speed, short toY, TweenTiming timing, TweenStyle style) {
  return _StartMiscTweenBySpeed(_eTweenViewportY, speed, 0, toY, 0, GetViewportY(), 0, timing, style);
}
int TweenViewportPosition(float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenViewportXY, seconds, toX, toY, GetViewportX(), GetViewportY(), 0, timing, style);
}
int TweenViewportPositionBySpeed(float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartMiscTweenBySpeed(_eTweenViewportXY, speed, toX, toY, GetViewportX(), GetViewportY(), 0, timing, style);
}
int TweenGamma(float seconds, short toGamma, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenGamma, seconds, toGamma, 0, System.Gamma, 0, 0, timing, style);
}
int TweenShakeScreen(float seconds, short fromDelay, short toDelay, short fromAmount, short toAmount, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenShakeScreen, seconds,  toDelay, toAmount, fromDelay, fromAmount, 0, timing, style);
}
int TweenAreaScaling(float seconds, int area, short fromMin, short toMin, short fromMax, short toMax, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenAreaScaling, seconds, toMin, toMax, fromMin, fromMax, area, timing, style);
}

// AUDIO Tweens
int TweenSpeechVolume(float seconds, short fromVolume, short toVolume, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenSpeechVolume, seconds, toVolume, 0, fromVolume, 0, 0, timing, style);
}
#ifndef STRICT_AUDIO
// Pre 3.2 Strict Audio Tweens
int TweenMusicMasterVolume(float seconds, short fromVolume, short toVolume, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenMusicMasterVolume, seconds, toVolume, 0, fromVolume, 0, 0, timing, style);
}
int TweenDigitalMasterVolume(float seconds, short fromVolume, short toVolume, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenDigitalMasterVolume, seconds, toVolume, 0, fromVolume, 0, 0, timing, style);
}
int TweenSoundVolume(float seconds, short fromVolume, short toVolume, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenSoundVolume, seconds, toVolume, 0, fromVolume, 0, 0, timing, style);
}
int TweenChannelVolume(float seconds, int channel, short fromVolume, short toVolume, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenChannelVolume, seconds, toVolume, 0, fromVolume, 0, channel, timing, style);
}
#endif

// Position
int TweenPosition(this GUI*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUITween(_eTweenGUIPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPosition(this Object*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartObjectTween(_eTweenObjectPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPosition(this Character*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartCharacterTween(_eTweenCharacterPosition, seconds, toX, toY, this.x, this.y, this, timing, style);
}
int TweenPosition(this GUIControl*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPosition(this Label*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPosition(this Button*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPosition(this TextBox*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPosition(this ListBox*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
 return _StartGUIControlTween(_eTweenGUIControlPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPosition(this Slider*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPosition(this InvWindow*, float seconds, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, seconds, toX, toY, this.X, this.Y, this, timing, style);
}

// Position By Speed
int TweenPositionBySpeed(this GUI*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUITweenBySpeed(_eTweenGUIPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPositionBySpeed(this Object*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartObjectTweenBySpeed(_eTweenObjectPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPositionBySpeed(this Character*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartCharacterTweenBySpeed(_eTweenCharacterPosition, speed, toX, toY, this.x, this.y, this, timing, style);
}
int TweenPositionBySpeed(this GUIControl*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTweenBySpeed(_eTweenGUIControlPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPositionBySpeed(this Label*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTweenBySpeed(_eTweenGUIControlPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPositionBySpeed(this Button*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTweenBySpeed(_eTweenGUIControlPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPositionBySpeed(this TextBox*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTweenBySpeed(_eTweenGUIControlPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPositionBySpeed(this ListBox*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTweenBySpeed(_eTweenGUIControlPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPositionBySpeed(this Slider*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTweenBySpeed(_eTweenGUIControlPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}
int TweenPositionBySpeed(this InvWindow*, float speed, short toX, short toY, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTweenBySpeed(_eTweenGUIControlPosition, speed, toX, toY, this.X, this.Y, this, timing, style);
}

// Transparency
int TweenTransparency(this GUI*, float seconds, short toTransparency, TweenTiming timing, TweenStyle style) {
  return _StartGUITween(_eTweenGUITransparency, seconds, toTransparency, 0, this.Transparency, 0, this, timing, style);
}
int TweenTransparency(this Object*, float seconds, short toTransparency, TweenTiming timing, TweenStyle style) {
  return _StartObjectTween(_eTweenObjectTransparency, seconds, toTransparency, 0, this.Transparency, 0, this, timing, style);
}
int TweenTransparency(this Character*, float seconds, short toTransparency, TweenTiming timing, TweenStyle style) {
  return _StartCharacterTween(_eTweenCharacterTransparency, seconds, toTransparency, 0, this.Transparency, 0, this, timing, style);
}

// Size
int TweenSize(this GUI*, float seconds, short toWidth, short toHeight, TweenTiming timing, TweenStyle style) {
  return _StartGUITween(_eTweenGUISize, seconds, toWidth, toHeight, this.Width, this.Height, this, timing, style);
}
int TweenSize(this GUIControl*, float seconds, short toWidth, short toHeight, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlSize, seconds, toWidth, toHeight, this.Width, this.Height, this, timing, style);
}
int TweenSize(this Label*, float seconds, short toWidth, short toHeight, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlSize, seconds, toWidth, toHeight, this.Width, this.Height, this, timing, style);
}
int TweenSize(this Button*, float seconds, short toWidth, short toHeight, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlSize, seconds, toWidth, toHeight, this.Width, this.Height, this, timing, style);
}
int TweenSize(this TextBox*, float seconds, short toWidth, short toHeight, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlSize, seconds, toWidth, toHeight, this.Width, this.Height, this, timing, style);
}
int TweenSize(this ListBox*, float seconds, short toWidth, short toHeight, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlSize, seconds, toWidth, toHeight, this.Width, this.Height, this, timing, style);
}
int TweenSize(this Slider*, float seconds, short toWidth, short toHeight, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlSize, seconds, toWidth, toHeight, this.Width, this.Height, this, timing, style);
}
int TweenSize(this InvWindow*, float seconds, short toWidth, short toHeight, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenGUIControlSize, seconds, toWidth, toHeight, this.Width, this.Height, this, timing, style);
}

// GUI Specific
int TweenZOrder(this GUI*, float seconds, short toZOrder, TweenTiming timing, TweenStyle style) {
  return _StartGUITween(_eTweenGUIZOrder, seconds, toZOrder, 0, this.ZOrder, 0, this, timing, style);
}

// Object Specific
int TweenImage(this Object*, Object* tmpObjectRef, float seconds, short toSprite, TweenTiming timing, TweenStyle style) {
  tmpObjectRef.Graphic = this.Graphic;
  tmpObjectRef.SetPosition(this.X, this.Y);
  tmpObjectRef.Transparency = 0;
  tmpObjectRef.Visible = true;

  this.Transparency = 100;
  this.Graphic = toSprite;

  if (style == eBlockTween) {
    tmpObjectRef.TweenTransparency(seconds, 100, timing, eNoBlockTween);
  }
  else {
    tmpObjectRef.TweenTransparency(seconds, 100, timing, style);
  }
  
  return this.TweenTransparency(seconds, 0, timing, style);
}

// Character Specific
int TweenAnimationSpeed(this Character*, float seconds, short toAnimationSpeed, TweenTiming timing, TweenStyle style) {
  return _StartCharacterTween(_eTweenCharacterAnimationSpeed, seconds, toAnimationSpeed, 0, this.AnimationSpeed, 0, this, timing, style);
}
int TweenScaling(this Character*, float seconds, short toScaling, TweenTiming timing, TweenStyle style) {
  this.ManualScaling = true;
  return _StartCharacterTween(_eTweenCharacterScaling, seconds, toScaling, 0, this.Scaling, 0, this, timing, style);
}

// Region Specific
int TweenLightLevel(this Region*, float seconds, short toLightLevel, TweenTiming timing, TweenStyle style) {
  return _StartRegionTween(_eTweenRegionLightLevel, seconds, toLightLevel, 0, this.LightLevel, 0, this, timing, style);
}
int TweenTintRed(this Region*, float seconds, short toRed, TweenTiming timing, TweenStyle style) {
  return _StartRegionTween(_eTweenRegionTintRed, seconds, toRed, 0, this.TintRed, 0, this, timing, style);
}
int TweenTintGreen(this Region*, float seconds, short toGreen, TweenTiming timing, TweenStyle style) {
  return _StartRegionTween(_eTweenRegionTintGreen, seconds, toGreen, 0, this.TintGreen, 0, this, timing, style);
}
int TweenTintBlue(this Region*, float seconds, short toBlue, TweenTiming timing, TweenStyle style) {
  return _StartRegionTween(_eTweenRegionTintBlue, seconds, toBlue, 0, this.TintBlue, 0, this, timing, style);
}
int TweenTintSaturation(this Region*, float seconds, short toSaturation, TweenTiming timing, TweenStyle style) {
  return _StartRegionTween(_eTweenRegionTintSaturation, seconds, toSaturation, 0, this.TintSaturation, 0, this, timing, style);
}
int TweenTint(this Region*, float seconds, short toRed, short toGreen, short toBlue, short toSaturation, TweenTiming timing, TweenStyle style) {
  if (style == eBlockTween) {
    this.TweenTintRed(seconds, toRed, timing, eNoBlockTween);
    this.TweenTintGreen(seconds, toGreen, timing, eNoBlockTween);
    this.TweenTintBlue(seconds, toBlue, timing, eNoBlockTween);
  }
  else {
    this.TweenTintRed(seconds, toRed, timing, style);
    this.TweenTintGreen(seconds, toGreen, timing, style);
    this.TweenTintBlue(seconds, toBlue, timing, style);
  }
  
  return this.TweenTintSaturation(seconds, toSaturation, timing, style);
}
int TweenTintToGrayscale(this Region*, float seconds, TweenTiming timing, TweenStyle style) {
  return this.TweenTint(seconds, 255, 255, 255, 100, timing, style);
}

// Label Specific
int TweenTextColor(this Label*, float seconds, short toColor, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenLabelTextColor, seconds, toColor, 0, this.TextColor, 0, this, timing, style);
}
int TweenTextColorRed(this Label*, float seconds, short toRed, TweenTiming timing, TweenStyle style) {
  short fromRed = GetRFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenLabelTextColorRed, seconds, toRed, 0, fromRed, 0, this, timing, style);
}
int TweenTextColorGreen(this Label*, float seconds, short toGreen, TweenTiming timing, TweenStyle style) {
  short fromGreen = GetGFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenLabelTextColorGreen, seconds, toGreen, 0, fromGreen, 0, this, timing, style);
}
int TweenTextColorBlue(this Label*, float seconds, short toBlue, TweenTiming timing, TweenStyle style) {
  short fromBlue = GetBFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenLabelTextColorBlue, seconds, toBlue, 0, fromBlue, 0, this, timing, style);
}

// Button Specific
int TweenTextColor(this Button*, float seconds, short toColor, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenButtonTextColor, seconds, toColor, 0, this.TextColor, 0, this, timing, style);
}
int TweenTextColorRed(this Button*, float seconds, short toRed, TweenTiming timing, TweenStyle style) {
  short fromRed = GetRFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenButtonTextColorRed, seconds, toRed, 0, fromRed, 0, this, timing, style);
}
int TweenTextColorGreen(this Button*, float seconds, short toGreen, TweenTiming timing, TweenStyle style) {
  short fromGreen = GetGFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenButtonTextColorGreen, seconds, toGreen, 0, fromGreen, 0, this, timing, style);
}
int TweenTextColorBlue(this Button*, float seconds, short toBlue, TweenTiming timing, TweenStyle style) {
  short fromBlue = GetRFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenButtonTextColorBlue, seconds, toBlue, 0, fromBlue, 0, this, timing, style);
}

// ListBox Specific
int TweenSelectedIndex(this ListBox*, float seconds, short toSelectedIndex, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenListBoxSelectedIndex, seconds, toSelectedIndex, 0, this.SelectedIndex, 0, this, timing, style);
}
int TweenTopItem(this ListBox*, float seconds, short toTopItem, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenListBoxTopItem, seconds, toTopItem, 0, this.TopItem, 0, this, timing, style);
}

// InvWindow Specific
int TweenTopItem(this InvWindow*, float seconds, short toTopItem, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenInvWindowTopItem, seconds, toTopItem, 0, this.TopItem, 0, this, timing, style);
}

// Slider Specific
int TweenValue(this Slider*, float seconds, short toValue, TweenTiming timing, TweenStyle style) {
 return _StartGUIControlTween(_eTweenSliderValue, seconds, toValue, 0, this.Value, 0, this, timing, style);
}

// Stop
function StopAllTweens(this GUI*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUI, this.ID, result);
}
function StopAllTweens(this Object*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceObject, this.ID, result);
}
function StopAllTweens(this Character*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceCharacter, this.ID, result);
}
function StopAllTweens(this Region*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceRegion, this.ID, result);
}
function StopAllTweens(this GUIControl*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUIControl, this.ID, result);
}
function StopAllTweens(this Label*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUIControl, this.ID, result);
}
function StopAllTweens(this Button*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUIControl, this.ID, result);
}
function StopAllTweens(this TextBox*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUIControl, this.ID, result);
}
function StopAllTweens(this ListBox*, TweenStopResult result) {
  _StopTweensForGUIControl(this, result);
}
function StopAllTweens(this Slider*, TweenStopResult result) {
  _StopTweensForGUIControl(this, result);
}
function StopAllTweens(this InvWindow*, TweenStopResult result) {
  _StopTweensForGUIControl(this, result);
}

#ifver 3.1
// TextBox 3.1+ Specific
int TweenTextColor(this TextBox*, float seconds, short toColor, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenTextBoxTextColorRed, seconds, toColor, 0, this.TextColor, 0, this, timing, style);
}
int TweenTextColorRed(this TextBox*, float seconds, short toRed, TweenTiming timing, TweenStyle style) {
  int fromRed = GetRFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenTextBoxTextColorRed, seconds, toRed, 0, fromRed, 0, this, timing, style);
}
int TweenTextColorGreen(this TextBox*, float seconds, short toGreen, TweenTiming timing, TweenStyle style) {
  int fromGreen = GetGFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenTextBoxTextColorGreen, seconds, toGreen, 0, fromGreen, 0, this, timing, style);
}
int TweenTextColorBlue(this TextBox*, float seconds, short toBlue, TweenTiming timing, TweenStyle style) {
  int fromBlue = GetBFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenTextBoxTextColorBlue, seconds, toBlue, 0, fromBlue, 0, this, timing, style);
}

// Slider 3.1+ Specific
int TweenHandleOffset(this Slider*, float seconds, short toHandleOffset, TweenTiming timing, TweenStyle style) {
  return _StartGUIControlTween(_eTweenSliderHandleOffset, seconds, toHandleOffset, 0, this.HandleOffset, 0, this, timing, style);
}
#endif
#ifdef STRICT_AUDIO
// 3.2+ Strict Audio Specific
int _StartAudioTween(_TweenType type, AudioChannel* audioChannelRef, float seconds, short toX, short toY, short fromX, short fromY,
    TweenTiming timing, TweenStyle style) {
  return _StartTween(type, seconds, toX, toY, fromX, fromY, _eTweenReferenceAudioChannel, audioChannelRef.ID, null, timing, style);
}
int TweenSystemVolume(float seconds, short toVolume, TweenTiming timing, TweenStyle style) {
  return _StartMiscTween(_eTweenSystemVolume, seconds, ClampInt(toVolume, 0, 100), 0, System.Volume, 0, 0, timing, style);
}
int TweenPanning(this AudioChannel*,  float seconds, short toPanning, TweenTiming timing, TweenStyle style) {
  return _StartAudioTween(_eTweenAudioChannelPanning, this, seconds, ClampInt(toPanning, -100,  100), 0, this.Panning, 0, timing, style);
}
int TweenVolume(this AudioChannel*,  float seconds, short toVolume, TweenTiming timing, TweenStyle style) {
  return _StartAudioTween(_eTweenAudioChannelVolume, this, seconds, ClampInt(toVolume, 0, 100), 0, this.Volume, 0, timing, style);
}
int TweenRoomLocation(this AudioChannel*,  float seconds, short toX, short toY, short fromX, short fromY, TweenTiming timing, TweenStyle style) {
  return _StartAudioTween(_eTweenAudioChannelRoomLocation, this, seconds, toX, toY, fromX, fromY, timing, style);
}
function StopAllTweens(this AudioChannel*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceAudioChannel, this.ID, result);
}
#endif