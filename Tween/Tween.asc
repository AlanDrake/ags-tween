// ags-tween is open source under the MIT License.
// Uses Robert Penner's easing equestions which are under the BSD License.
//
// TERMS OF USE - AGS TWEEN MODULE (ags-tween)
//
// Copyright (c) 2009, 2014 Edmundo Ruiz
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

#define NULL_TWEEN_DURATION -1.0
#define HALF_PI (Maths.Pi * 0.5)
#define DOUBLE_PI (Maths.Pi * 2.0)

enum _TweenReferenceType {
  _eTweenReferenceGUI,
  _eTweenReferenceObject,
  _eTweenReferenceCharacter,
  _eTweenReferenceRegion,
  _eTweenReferenceGUIControl, 
  _eTweenReferenceMisc,
#ifdef STRICT_AUDIO
  _eTweenReferenceAudioChannel,
#endif
};

enum _TweenType {
  _eTweenGUIPosition,
  _eTweenGUITransparency,
  _eTweenGUISize,
  _eTweenGUIZOrder,
  _eTweenObjectPosition,
  _eTweenObjectTransparency,
  _eTweenCharacterPosition,
  _eTweenCharacterScaling,
  _eTweenCharacterTransparency,
  _eTweenCharacterAnimationSpeed,
  _eTweenRegionLightLevel, 
  _eTweenRegionTintRed,
  _eTweenRegionTintGreen,
  _eTweenRegionTintBlue,
  _eTweenRegionTintSaturation,
  _eTweenLabelTextColor,
  _eTweenLabelTextColorRed,
  _eTweenLabelTextColorGreen,
  _eTweenLabelTextColorBlue,
  _eTweenGUIControlPosition, 
  _eTweenGUIControlSize,
  _eTweenButtonTextColor,
  _eTweenButtonTextColorRed,
  _eTweenButtonTextColorGreen,
  _eTweenButtonTextColorBlue,
  _eTweenSliderValue,
  _eTweenListBoxSelectedIndex,
  _eTweenListBoxTopItem,
  _eTweenInvWindowTopItem,
  _eTweenViewport,
  _eTweenSystemGamma,
  _eTweenShakeScreen,
  _eTweenAreaScaling,
  _eTweenSpeechVolume,
#ifver 3.1
  _eTweenTextBoxTextColor, 
  _eTweenTextBoxTextColorRed,
  _eTweenTextBoxTextColorGreen,
  _eTweenTextBoxTextColorBlue,
  _eTweenSliderHandleOffset,
#endif
#ifndef STRICT_AUDIO
  _eTweenMusicMasterVolume,
  _eTweenDigitalMasterVolume,
  _eTweenSoundVolume,
  _eTweenChannelVolume,
  _eTweenMusicVolume, 
#endif
#ifdef STRICT_AUDIO
  _eTweenSystemVolume, 
  _eTweenAudioChannelVolume,  
  _eTweenAudioChannelRoomLocation,
  _eTweenAudioChannelPanning, 
#endif
};

struct _TweenObject extends TweenBase {
  _TweenType type;
  _TweenReferenceType refType;
  GUIControl* guiControlRef;
  int refID;
  import function Step(float amount);
};

_TweenObject _tweens[Tween_MAX_INSTANCES];
float _longestTweenDuration = 0.0;
bool _increaseGameSpeedOnBlockingTweens = true;
short _gameSpeed = -1;

///////////////////////////////////////////////////////////////////////////////
// Utility Functions
///////////////////////////////////////////////////////////////////////////////

#ifdef DEBUG
function _AssertTrue(bool statement, String errorMessage) {
  if (!statement) {
    AbortGame(errorMessage);
  }
}
#endif

#ifdef STRICT_AUDIO
/*
 * Workaround for the following AGS issues with the new audio system:
 * 1. http://www.bigbluecup.com/yabb/index.php?topic=42186.0
 * 2. http://www.bigbluecup.com/yabb/index.php?topic=45071.0
 */
bool _ShouldLeaveAudioAlone(AudioChannel *channel) {
  return (channel == null || Game.SkippingCutscene);
}
#endif

float _GetTweenRemainingDuration(int index) {
  return _tweens[index].duration - _tweens[index].elapsed;
}

function _CheckIfIsLongestTween(int index) {
  float remainingDuration = _GetTweenRemainingDuration(index);
  
  if (_tweens[index].style != eReverseRepeatTween &&
      _tweens[index].style != eRepeatTween &&
     remainingDuration > _longestTweenDuration) {     
    _longestTweenDuration = remainingDuration;
  }
}

///////////////////////////////////////////////////////////////////////////////
// TweenGame Functions
///////////////////////////////////////////////////////////////////////////////

static int TweenGame::GetRFromColor(int color) {
  float floatColor = IntToFloat(color);
  return FloatToInt(floatColor / 2048.0) * 8;
}

static int TweenGame::GetGFromColor(int color) {
  float floatColor = IntToFloat(color);
  return FloatToInt(( floatColor - IntToFloat(FloatToInt(floatColor / 2048.0) * 2048)) / 64.0) * 8;
}

static int TweenGame::GetBFromColor(int color) {
  float floatColor = IntToFloat(color);
  
  float withoutR = floatColor - IntToFloat(FloatToInt(floatColor / 2048.0) * 2048);
  int withoutRInt = FloatToInt(withoutR);
  
  float withoutG = withoutR - IntToFloat(FloatToInt(withoutR / 64.0) * 64);
  int withoutGInt = FloatToInt(withoutG);
  
  int result = withoutGInt * 8;

  if (result > 255) {
    result = (withoutGInt - 31) * 8 - 1;
  }

  return result;
}

///////////////////////////////////////////////////////////////////////////////
// TweenMaths Functions
///////////////////////////////////////////////////////////////////////////////

static float TweenMaths::Abs(float value) {
  if (value < 0.0) {
    return -value;
  }
  return value;
}

static float TweenMaths::GetDistance(int fromX, int fromY, int toX, int toY) {
  return Maths.Sqrt(
    Maths.RaiseToPower(IntToFloat(toX - fromX), 2.0) + 
    Maths.RaiseToPower(IntToFloat(toY - fromY), 2.0)
  );
}

static int TweenMaths::Lerp(float from, float to, float amount) {
  return FloatToInt(from + (to - from) * amount, eRoundUp);
}

static int TweenMaths::ClampInt(int value, int min, int max) {
  if (value > max) return max;
  else if (value < min) return min;
  return value;
}

static int TweenMaths::MaxInt(int a, int b) {
  if (a > b) return a;
  return b;
}

static int TweenMaths::MinInt(int a, int b) {
  if (a < b) return a;
  return b;
}

///////////////////////////////////////////////////////////////////////////////
// Global Utility Functions
///////////////////////////////////////////////////////////////////////////////

int SecondsToLoops(float seconds) {
  return FloatToInt(IntToFloat(GetGameSpeed()) * seconds, eRoundNearest);
}

float LoopsToSeconds(int loops) {
  return IntToFloat(loops) / IntToFloat(GetGameSpeed());
}

function WaitSeconds(float seconds) {
  Wait(SecondsToLoops(seconds));
}

function WaitForLongest(int duration1, int duration2, int duration3, int duration4, int duration5, int duration6) {
#ifdef DEBUG
  _AssertTrue(duration1 >= 0, "WaitForLongest: duration1 cannot be negative!");
  _AssertTrue(duration2 >= 0, "WaitForLongest: duration2 cannot be negative!");
  _AssertTrue(duration3 >= 0, "WaitForLongest: duration3 cannot be negative!");
  _AssertTrue(duration4 >= 0, "WaitForLongest: duration4 cannot be negative!");
  _AssertTrue(duration5 >= 0, "WaitForLongest: duration5 cannot be negative!");
  _AssertTrue(duration6 >= 0, "WaitForLongest: duration6 cannot be negative!");
#endif
  if (duration2 > duration1) {
    duration1 = duration2;
  }
  if (duration3 > duration1) {
    duration1 = duration3;
  }
  if (duration4 > duration1) {
    duration1 = duration4;
  }
  if (duration5 > duration1) {
    duration1 = duration5;
  }
  if (duration6 > duration1) {
    duration1 = duration6;
  }
  Wait(duration1);
}

function SetTimerWithSeconds(int timerID, float secondsTimeout) {
  SetTimer(timerID, SecondsToLoops(secondsTimeout));
}

function SetTimerForLongest(int timerID, int timeout1, int timeout2, int timeout3, int timeout4, int timeout5, int timeout6) {
#ifdef DEBUG
  _AssertTrue(timeout1 >= 0, "WaitForLongest: timeout1 cannot be negative!");
  _AssertTrue(timeout2 >= 0, "WaitForLongest: timeout2 cannot be negative!");
  _AssertTrue(timeout3 >= 0, "WaitForLongest: timeout3 cannot be negative!");
  _AssertTrue(timeout4 >= 0, "WaitForLongest: timeout4 cannot be negative!");
  _AssertTrue(timeout5 >= 0, "WaitForLongest: timeout5 cannot be negative!");
  _AssertTrue(timeout6 >= 0, "WaitForLongest: timeout5 cannot be negative!");
#endif
  if (timeout2 > timeout1) {
    timeout1 = timeout2;
  }
  if (timeout3 > timeout1) {
    timeout1 = timeout3;
  }
  if (timeout4 > timeout1) {
    timeout1 = timeout4;
  }
  if (timeout5 > timeout1) {
    timeout1 = timeout5;
  }
  if (timeout6 > timeout1) {
    timeout1 = timeout6;
  }
  SetTimer(timerID, timeout1);
}

float SpeedToSeconds(float speed, int fromX, int fromY, int toX, int toY) {
  return TweenMaths.GetDistance(fromX, fromY, toX, toY) / speed;
}

///////////////////////////////////////////////////////////////////////////////
// Tween Easing
///////////////////////////////////////////////////////////////////////////////

// TERMS OF USE - EASING EQUATIONS
//
// Open source under the BSD License.
//
// Copyright (c) 2001 Robert Penner
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//  * Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//  * Neither the name of the author nor the names of contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

static float TweenEasing::EaseLinear(float t, float d) {
  return t / d;
}
    
static float TweenEasing::EaseInSine(float t, float b, float c, float d) {
  return -c * Maths.Cos((t/d) * HALF_PI) + c + b;
}
static float TweenEasing::EaseOutSine(float t, float b, float c, float d) {
  return c * Maths.Sin((t/d) * HALF_PI) + b;
}
static float TweenEasing::EaseInOutSine(float t, float b, float c, float d) {
  return (-c*0.5) * (Maths.Cos(Maths.Pi*(t/d)) -1.0) + b;
}

static float TweenEasing::EaseInPower(float t, float b, float c, float d, float exponent) {
  t = t / d;
  return c*Maths.RaiseToPower(t, exponent) + b;
}
static float TweenEasing::EaseOutPower(float t, float b, float c, float d, float exponent) {
  float add = 1.0;
  if (FloatToInt(exponent, eRoundDown) % 2 == 0) {
    c = -c;
    add = -add;
  }
  t = (t / d) - 1.0;
  return c*(Maths.RaiseToPower(t, exponent) + add) + b;
}
static float TweenEasing::EaseInOutPower(float t, float b, float c, float d, float exponent) {
  t = t / (d*0.5);
  if (t < 1.0) {
    return (c*0.5)*Maths.RaiseToPower(t, exponent) + b;
  }
  float add = 2.0;
  if (FloatToInt(exponent, eRoundDown) % 2 == 0) {
    c = -c;
    add = -2.0;
  }
  return (c*0.5)*(Maths.RaiseToPower(t - 2.0, exponent) + add) + b;
}

static float TweenEasing::EaseInQuad(float t, float b, float c, float d) {
  t = (t / d);
  return c*t*t + b;
}
static float TweenEasing::EaseOutQuad(float t, float b, float c, float d) {
  t = (t / d);
  return -c*t*(t-2.0) + b;
}
static float TweenEasing::EaseInOutQuad(float t, float b, float c, float d) {
  t = t / (d*0.5);
  if (t < 1.0) {
    return (c*0.5)*t*t + b;
  }
  t = t - 1.0;
  return -(c*0.5)*(t*(t-2.0) - 1.0) + b;
}

static float TweenEasing::EaseInExpo(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  return c * Maths.RaiseToPower(2.0, 10.0 * (t/d - 1.0)) + b;
}
static float TweenEasing::EaseOutExpo(float t, float b, float c, float d) {
  if (t == d) {
    return b + c;
  }
  return c * (-Maths.RaiseToPower(2.0, -10.0 * (t/d)) + 1.0) + b;
}
static float TweenEasing::EaseInOutExpo(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  if (t == d) {
    return b + c;
  }
  t = t / (d*0.5);
  if (t < 1.0) {
    return (c*0.5) * Maths.RaiseToPower(2.0, 10.0 * (t - 1.0)) + b;
  }
  t = t - 1.0;
  return (c*0.5) * (-Maths.RaiseToPower(2.0, -10.0 * t) + 2.0) + b;
}

static float TweenEasing::EaseInCirc(float t, float b, float c, float d) {
  t = t / d;
  return -c * (Maths.Sqrt(1.0 - t*t) - 1.0) + b;
}
static float TweenEasing::EaseOutCirc(float t, float b, float c, float d) {
  t = t / d - 1.0;
  return c * Maths.Sqrt(1.0 - t*t) + b;
}
static float TweenEasing::EaseInOutCirc(float t, float b, float c, float d) {
  t = t / (d*0.5);
  if (t < 1.0) {
    return -(c*0.5) * (Maths.Sqrt(1.0 - t*t) - 1.0) + b;
  }
  t = t - 2.0;
  return (c*0.5) * (Maths.Sqrt(1.0 - t*t) + 1.0) + b;
}

static float TweenEasing::EaseInBack(float t, float b, float c, float d) {  
  float s = 1.70158;
  t = (t / d);
  return c*t*t*((s+1.0)*t - s) + b;
}
static float TweenEasing::EaseOutBack(float t, float b, float c, float d) {
  float s = 1.70158;
  t = (t / d) - 1.0;
  return c*(t*t*((s+1.0)*t + s) + 1.0) + b;
}
static float TweenEasing::EaseInOutBack(float t, float b, float c, float d) {
  float s = 1.70158;
  t = t / (d / 2.0);
  s = s * 1.525;
  if (t < 1.0) {
    return (c/2.0)*(t*t*((s+1.0)*t - s)) + b;
  }
  t = t - 2.0;
  return (c/2.0)*(t*t*((s+1.0)*t + s) + 2.0) + b;
}

static float TweenEasing::EaseOutBounce(float t, float b, float c, float d) {
  t = t / d;
  if (t < (1.0 / 2.75)) {
    return c*(7.5625*t*t) + b;
  }
  else if (t < (2.0 / 2.75)) {
    t = t - (1.5 / 2.75);
    return c*(7.5625*t*t + 0.75) + b;
  }
  else if (t < (2.5 / 2.75)) {
    t = t - (2.25 / 2.75);
    return c*(7.5625*t*t + 0.9375) + b;
  }
  
  t = t - (2.625 / 2.75);
  return c*(7.5625*t*t + 0.984375) + b;
}
static float TweenEasing::EaseInBounce(float t, float b, float c, float d) {
  return c - TweenEasing.EaseOutBounce(d - t, 0.0, c, d) + b;
}
static float TweenEasing::EaseInOutBounce(float t, float b, float c, float d) {
  if (t < (d / 2.0)) {
    return TweenEasing.EaseInBounce(t * 2.0, 0.0, c, d) * 0.5 + b;
  }
  return (TweenEasing.EaseOutBounce((t * 2.0) - d, 0.0, c, d) * 0.5) + (c*0.5) + b;
}

static float TweenEasing::EaseInElastic(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  t = t / d;
  if (t == 1.0) {
    return b + c;
  }
  float p = d * 0.3;
  float s = p / 4.0;
  t = t - 1.0;
  
  return -(c*Maths.RaiseToPower(2.0, 10.0*t) * Maths.Sin(((t*d - s)*DOUBLE_PI) / p)) + b;
}
static float TweenEasing::EaseOutElastic(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  t = t / d;
  if (t == 1.0) {
    return b + c;
  }
  float p = d * 0.3;
  float s = p / 4.0;

  return ((c*Maths.RaiseToPower(2.0, -10.0*t)) * Maths.Sin(((t*d - s)*DOUBLE_PI / p)) + c + b);
}
static float TweenEasing::EaseInOutElastic(float t, float b, float c, float d) {
  if (t == 0.0) {
    return b;
  }
  t = t / (d * 0.5);
  if (t == 2.0) {
    return b + c;
  }
  
  float p = d * (0.3 * 1.5);
  float s = p / 4.0;
  if (t < 1.0) {
    t = t - 1.0;
    return -0.5*(c*Maths.RaiseToPower(2.0, 10.0*t) * Maths.Sin(((t*d - s)*DOUBLE_PI) / p)) + b;
  }
  t = t - 1.0;
  return c*Maths.RaiseToPower(2.0, -10.0*t) * Maths.Sin(((t*d - s)*DOUBLE_PI) / p)*0.5 + c + b;
}

static float TweenEasing::GetAmount(float elapsed, float duration, TweenEasingType easingType) {
  float easing;
  
  if (easingType == eEaseLinearTween) {
    easing = TweenEasing.EaseLinear(elapsed, duration);
  }
  if (easingType == eEaseInSineTween) {
    easing = TweenEasing.EaseInSine(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseOutSineTween) {
    easing = TweenEasing.EaseOutSine(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInOutSineTween) {
    easing = TweenEasing.EaseInOutSine(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInCubicTween) {
    easing = TweenEasing.EaseInPower(elapsed, 0.0, 1.0, duration, 3.0);
  }
  else if (easingType == eEaseOutCubicTween) {
    easing = TweenEasing.EaseOutPower(elapsed, 0.0, 1.0, duration, 3.0);
  }
  else if (easingType == eEaseInOutCubicTween) {
    easing = TweenEasing.EaseInOutPower(elapsed, 0.0, 1.0, duration, 3.0);
  }
  else if (easingType == eEaseInQuartTween) {
    easing = TweenEasing.EaseInPower(elapsed, 0.0, 1.0, duration, 4.0);
  }
  else if (easingType == eEaseOutQuartTween) {
    easing = TweenEasing.EaseOutPower(elapsed, 0.0, 1.0, duration, 4.0);
  }
  else if (easingType == eEaseInOutQuartTween) {
    easing = TweenEasing.EaseInOutPower(elapsed, 0.0, 1.0, duration, 4.0);
  }
  else if (easingType == eEaseInQuintTween) {
    easing = TweenEasing.EaseInPower(elapsed, 0.0, 1.0, duration, 5.0);
  }
  else if (easingType == eEaseOutQuintTween) {
    easing = TweenEasing.EaseOutPower(elapsed, 0.0, 1.0, duration, 5.0);
  }
  else if (easingType == eEaseInOutQuintTween) {
    easing = TweenEasing.EaseInOutPower(elapsed, 0.0, 1.0, duration, 5.0);
  }
  else if (easingType == eEaseInQuadTween) {
    easing = TweenEasing.EaseInQuad(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseOutQuadTween) {
    easing = TweenEasing.EaseOutQuad(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInOutQuadTween) {
    easing = TweenEasing.EaseInOutQuad(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInExpoTween) {
    easing = TweenEasing.EaseInExpo(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseOutExpoTween) {
    easing = TweenEasing.EaseOutExpo(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInOutExpoTween) {
    easing = TweenEasing.EaseInOutExpo(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInCircTween) {
    easing = TweenEasing.EaseInCirc(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseOutCircTween) {
    easing = TweenEasing.EaseOutCirc(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInOutCircTween) {
    easing = TweenEasing.EaseInOutCirc(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInBackTween) {
    easing = TweenEasing.EaseInBack(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseOutBackTween) {
    easing = TweenEasing.EaseOutBack(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInOutBackTween) {
    easing = TweenEasing.EaseInOutBack(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInElasticTween) {
    easing = TweenEasing.EaseInElastic(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseOutElasticTween) {
    easing = TweenEasing.EaseOutElastic(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInOutElasticTween) {
    easing = TweenEasing.EaseInOutElastic(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInBounceTween) {
    easing = TweenEasing.EaseInBounce(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseOutBounceTween) {
    easing = TweenEasing.EaseOutBounce(elapsed, 0.0, 1.0, duration);
  }
  else if (easingType == eEaseInOutBounceTween) {
    easing = TweenEasing.EaseInOutBounce(elapsed, 0.0, 1.0, duration);
  }

  return easing;
}

// END BSD LICENSE

///////////////////////////////////////////////////////////////////////////////
// TweenBase Functions
///////////////////////////////////////////////////////////////////////////////

function TweenBase::Restart() {
  this.elapsed = -this.startDelay;
}

function TweenBase::Reverse() {
  float fromX = this.toX;
  float fromY = this.toY;
  this.toX = this.fromX;
  this.toY = this.fromY;
  this.fromX = fromX;
  this.fromY = fromY;
  
  TweenEasingType easingType = this.easingType;
  if (easingType == eEaseOutSineTween) {
    easingType = eEaseInSineTween;
  }
  else if (easingType == eEaseInSineTween) {
    easingType = eEaseOutSineTween;
  }
  else if (easingType == eEaseOutCubicTween) {
    easingType = eEaseInCubicTween;
  }
  else if (easingType == eEaseInCubicTween) {
    easingType = eEaseOutCubicTween;
  }
  else if (easingType == eEaseOutQuadTween) {
    easingType = eEaseInQuadTween;
  }
  else if (easingType == eEaseInQuadTween) {
    easingType = eEaseOutQuadTween;
  }
  else if (easingType == eEaseOutQuintTween) {
    easingType = eEaseInQuintTween;
  }
  else if (easingType == eEaseInQuintTween) {
    easingType = eEaseOutQuintTween;
  }
  else if (easingType == eEaseOutQuartTween) {
    easingType = eEaseInQuartTween;
  }
  else if (easingType == eEaseInQuartTween) {
    easingType = eEaseOutQuartTween;
  }
  else if (easingType == eEaseOutExpoTween) {
    easingType = eEaseInExpoTween;
  }
  else if (easingType == eEaseInExpoTween) {
    easingType = eEaseOutExpoTween;
  }
  else if (easingType == eEaseOutCircTween) {
    easingType = eEaseInCircTween;
  }
  else if (easingType == eEaseInCircTween) {
    easingType = eEaseOutCircTween;
  }
  else if (easingType == eEaseOutElasticTween) {
    easingType = eEaseInElasticTween;
  }
  else if (easingType == eEaseInElasticTween) {
    easingType = eEaseOutElasticTween;
  }
  else if (easingType == eEaseOutBounceTween) {
    easingType = eEaseInBounceTween;
  }
  else if (easingType == eEaseInBounceTween) {
    easingType = eEaseOutBounceTween;
  }
  else if (easingType == eEaseOutBackTween) {
    easingType = eEaseInBackTween;
  }
  else if (easingType == eEaseInBackTween) {
    easingType = eEaseOutBackTween;
  }
  
  this.easingType = easingType;
}

int TweenBase::Init(float amount, short fromX, short fromY, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  if (timing == eTweenSpeed) {
    amount = SpeedToSeconds(amount, fromX, fromY, toX, toY);
  }
  this.toX = IntToFloat(toX);
  this.toY = IntToFloat(toY);
  this.fromX = IntToFloat(fromX);
  this.fromY = IntToFloat(fromY);
  this.duration = IntToFloat(SecondsToLoops(amount));
  this.startDelay = IntToFloat(SecondsToLoops(TweenMaths.Abs(startDelay)));
  this.elapsed = -this.startDelay;
  this.easingType = easingType;
  this.style = style;
  
  return FloatToInt(this.duration - this.elapsed, eRoundUp) + 1;
}

///////////////////////////////////////////////////////////////////////////////
// _TweenObject Functions
///////////////////////////////////////////////////////////////////////////////

/**
 * Where the magic happens, the tween gets updated here.
 * @param amount is from 0.0 to 1.0
 */
function _TweenObject::Step(float amount) { 
  // GUI step
  if (this.type == _eTweenGUIPosition) {
    int x, y;
    if (this.fromX == this.toX) x = gui[this.refID].X; else x = TweenMaths.MinInt(TweenMaths.Lerp(this.fromX, this.toX, amount), System.ViewportWidth - 1);
    if (this.fromY == this.toY) y = gui[this.refID].Y; else y = TweenMaths.MinInt(TweenMaths.Lerp(this.fromY, this.toY, amount), System.ViewportHeight - 1);
    gui[this.refID].SetPosition(x, y);
  }
  else if (this.type == _eTweenGUISize) {
    int x, y;
    if (this.fromX == this.toX) x = gui[this.refID].Width; else x = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 1, System.ViewportWidth);
    if (this.fromY == this.toY) y = gui[this.refID].Height; else y = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromY, this.toY, amount), 1, System.ViewportHeight);
    gui[this.refID].SetSize(x, y);
  }
  else if (this.type == _eTweenGUITransparency) {
    // Workaround for Popup Modal GUIs. If the scripter is fading this in, then make it vsible.
    GUI* refGUI = gui[this.refID];
    if (this.elapsed == 0.0 && refGUI.Visible == false && refGUI.Transparency == 100) {
      refGUI.Visible = true;
    }

    refGUI.Transparency = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 100);

    // Workaround for Popup Modal GUIs. If the scripter is fading this out, then make it invisble.
    if (this.elapsed == this.duration && refGUI.Visible == true && refGUI.Transparency == 100) {
      refGUI.Visible = false;
    }
  }
  else if (this.type == _eTweenGUIZOrder) {
    gui[this.refID].ZOrder = TweenMaths.Lerp(this.fromX, this.toX, amount);
  }
  // OBJECT step
  else if (this.type == _eTweenObjectPosition) {
    int x, y;
    if (this.fromX == this.toX) x = object[this.refID].X; else x = TweenMaths.Lerp(this.fromX, this.toX, amount);
    if (this.fromY == this.toY) y = object[this.refID].Y; else y = TweenMaths.Lerp(this.fromY, this.toY, amount);
    object[this.refID].X = x;
    object[this.refID].Y = y;
  }
  else if (this.type == _eTweenObjectTransparency) {
    Object *objectRef = object[this.refID];
    if (this.elapsed == 0.0 && objectRef.Visible == false && objectRef.Transparency == 100) {
      objectRef.Visible = true;
    }
    
    objectRef.Transparency = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 100);

    if (this.elapsed == this.duration && objectRef.Visible == true && objectRef.Transparency == 100) {
      objectRef.Visible = false;
    }
  }
  // CHARACTER step
  else if (this.type == _eTweenCharacterPosition) {
    if (this.fromX != this.toY) {
      character[this.refID].x = TweenMaths.Lerp(this.fromX, this.toX, amount);
    }
    if (this.fromY != this.toY) {
      character[this.refID].y = TweenMaths.Lerp(this.fromY, this.toY, amount);
    }
  }
  else if (this.type == _eTweenCharacterScaling) {
    character[this.refID].Scaling = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 5, 200);
  }
  else if (this.type == _eTweenCharacterTransparency) {
    character[this.refID].Transparency = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 100);
  }
  else if (this.type == _eTweenCharacterAnimationSpeed) {
    character[this.refID].AnimationSpeed = TweenMaths.Lerp(this.fromX, this.toX, amount);
  }
  // REGION step
  else if (this.type == _eTweenRegionLightLevel) {
    region[this.refID].LightLevel = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), -100, 100);
  }
  else if (this.type == _eTweenRegionTintRed) {
    int saturation = TweenMaths.MaxInt(0, region[this.refID].TintSaturation);
    region[this.refID].Tint(TweenMaths.Lerp(this.fromX, this.toX, amount), region[this.refID].TintGreen, region[this.refID].TintBlue, saturation);
  }
  else if (this.type == _eTweenRegionTintGreen) {
    int saturation = TweenMaths.MaxInt(0, region[this.refID].TintSaturation);
    region[this.refID].Tint(region[this.refID].TintRed, TweenMaths.Lerp(this.fromX, this.toX, amount), region[this.refID].TintBlue, saturation);
  }
  else if (this.type == _eTweenRegionTintBlue) {
    int saturation = TweenMaths.MaxInt(0, region[this.refID].TintSaturation);
    region[this.refID].Tint(region[this.refID].TintRed, region[this.refID].TintGreen, TweenMaths.Lerp(this.fromX, this.toX, amount), saturation);
  }
  else if (this.type == _eTweenRegionTintSaturation) {
    int saturation = TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount));
    region[this.refID].Tint(region[this.refID].TintRed, region[this.refID].TintGreen, region[this.refID].TintBlue, saturation);
  }
  // GUICONTROL step
  else if (this.type == _eTweenGUIControlPosition) {
    int x, y;
    if (this.fromX == this.toX) x = this.guiControlRef.X; else x = TweenMaths.Lerp(this.fromX, this.toX, amount);
    if (this.fromY == this.toY) y = this.guiControlRef.Y; else y = TweenMaths.Lerp(this.fromY, this.toY, amount);
    this.guiControlRef.SetPosition(x, y);
  }
  else if (this.type == _eTweenGUIControlSize) {
    int x, y;
    if (this.fromX == this.toX) x = this.guiControlRef.Width; else x = TweenMaths.Lerp(this.fromX, this.toX, amount);
    if (this.fromY == this.toY) y = this.guiControlRef.Height; else y = TweenMaths.Lerp(this.fromY, this.toY, amount);
    this.guiControlRef.SetSize(x, y);
  }
  // LABEL step
  else if (this.type == _eTweenLabelTextColor) {
    this.guiControlRef.AsLabel.TextColor = TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount));
  }
  else if (this.type == _eTweenLabelTextColorRed) {
    this.guiControlRef.AsLabel.TextColor = Game.GetColorFromRGB(TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)), TweenGame.GetGFromColor(this.guiControlRef.AsLabel.TextColor), TweenGame.GetBFromColor(this.guiControlRef.AsLabel.TextColor));
  }
  else if (this.type == _eTweenLabelTextColorGreen) {
    this.guiControlRef.AsLabel.TextColor = Game.GetColorFromRGB(TweenGame.GetRFromColor(this.guiControlRef.AsLabel.TextColor), TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)), TweenGame.GetBFromColor(this.guiControlRef.AsLabel.TextColor));
  }
  else if (this.type == _eTweenLabelTextColorBlue) {
    this.guiControlRef.AsLabel.TextColor = Game.GetColorFromRGB(TweenGame.GetRFromColor(this.guiControlRef.AsLabel.TextColor), TweenGame.GetGFromColor(this.guiControlRef.AsLabel.TextColor), TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)));
  }
  // BUTTON step
  else if (this.type == _eTweenButtonTextColor) {
    this.guiControlRef.AsButton.TextColor = TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount));
  }
  else if (this.type == _eTweenButtonTextColorRed) {
    this.guiControlRef.AsButton.TextColor = Game.GetColorFromRGB(TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)), TweenGame.GetGFromColor(this.guiControlRef.AsLabel.TextColor), TweenGame.GetBFromColor(this.guiControlRef.AsLabel.TextColor));
  }
  else if (this.type == _eTweenButtonTextColorGreen) {
    this.guiControlRef.AsButton.TextColor = Game.GetColorFromRGB(TweenGame.GetRFromColor(this.guiControlRef.AsButton.TextColor), TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)), TweenGame.GetBFromColor(this.guiControlRef.AsButton.TextColor));
  }
  else if (this.type == _eTweenButtonTextColorBlue) {
    this.guiControlRef.AsButton.TextColor = Game.GetColorFromRGB(TweenGame.GetRFromColor(this.guiControlRef.AsButton.TextColor), TweenGame.GetGFromColor(this.guiControlRef.AsButton.TextColor), TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)));
  }
  // TEXTBOX step
#ifver 3.1
  else if (this.type == _eTweenTextBoxTextColor) {
    this.guiControlRef.AsTextBox.TextColor = TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount));
  }
  else if (this.type == _eTweenTextBoxTextColorRed) {
    this.guiControlRef.AsTextBox.TextColor = Game.GetColorFromRGB(TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)), TweenGame.GetGFromColor(this.guiControlRef.AsTextBox.TextColor), TweenGame.GetBFromColor(this.guiControlRef.AsTextBox.TextColor));
  }
  else if (this.type == _eTweenTextBoxTextColorGreen) {
    this.guiControlRef.AsTextBox.TextColor = Game.GetColorFromRGB(TweenGame.GetRFromColor(this.guiControlRef.AsTextBox.TextColor), TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)), TweenGame.GetBFromColor(this.guiControlRef.AsTextBox.TextColor));
  }
  else if (this.type == _eTweenTextBoxTextColorBlue) {
    this.guiControlRef.AsTextBox.TextColor = Game.GetColorFromRGB(TweenGame.GetRFromColor(this.guiControlRef.AsTextBox.TextColor), TweenGame.GetGFromColor(this.guiControlRef.AsTextBox.TextColor), TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)));
  }
#endif
  // LISTBOX step
  else if (this.type == _eTweenListBoxSelectedIndex) {
    this.guiControlRef.AsListBox.SelectedIndex = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), -1, this.guiControlRef.AsListBox.ItemCount - 1);
  }
  else if (this.type == _eTweenListBoxTopItem) {
    this.guiControlRef.AsListBox.TopItem = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, this.guiControlRef.AsListBox.ItemCount - 1);
  }
  // SLIDER step
  else if (this.type == _eTweenSliderValue) {
    this.guiControlRef.AsSlider.Value =  TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), this.guiControlRef.AsSlider.Min, this.guiControlRef.AsSlider.Max);
  }
#ifver 3.1
  else if (this.type == _eTweenSliderHandleOffset) {
    this.guiControlRef.AsSlider.HandleOffset = TweenMaths.Lerp(this.fromX, this.toX, amount);
  }
#endif
  // INVWINDOW step
  else if (this.type == _eTweenInvWindowTopItem) {
    this.guiControlRef.AsInvWindow.TopItem = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, this.guiControlRef.AsInvWindow.ItemCount - 1);
  }
  // MISC step
  else if (this.type == _eTweenViewport) {
    int x, y;
    if (this.fromX == this.toX) x = GetViewportX(); else x = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, Room.Width);
    if (this.fromY == this.toY) y = GetViewportY(); else y = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromY, this.toY, amount), 0, Room.Height);
    SetViewport(x, y);
  }
  else if (this.type == _eTweenSystemGamma) {
    System.Gamma = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 200);
  }
  else if (this.type == _eTweenShakeScreen) {
    ShakeScreenBackground(TweenMaths.MaxInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 2), TweenMaths.Lerp(this.fromY, this.toY, amount), 1);
  }
  else if (this.type == _eTweenAreaScaling) {
    SetAreaScaling(this.refID, TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 5, 200), TweenMaths.ClampInt(TweenMaths.Lerp(this.fromY, this.toY, amount), 5, 200));
  }
  // AUDIO step
  else if (this.type == _eTweenSpeechVolume) {
    SetSpeechVolume(TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 255));
  }
  // Pre AGS 3.2 strict audio
#ifndef STRICT_AUDIO
  else if (this.type == _eTweenMusicMasterVolume) {
    SetMusicMasterVolume(TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 100));
  }
  else if (this.type == _eTweenDigitalMasterVolume) {
    SetDigitalMasterVolume(TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 100));
  }
  else if (this.type == _eTweenSoundVolume) {
    SetSoundVolume(TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)));
  }
  else if (this.type == _eTweenChannelVolume) {
    SetChannelVolume(this.refID, TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount)));
  }
  else if (this.type == _eTweenMusicVolume) {
    SetMusicVolume(TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 100));
  }
#endif
  // AGS 3.2+ strict audio
#ifdef STRICT_AUDIO
  else if (this.type == _eTweenSystemVolume) {
    System.Volume = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, 100);
  }
  else if (this.type == _eTweenAudioChannelVolume) {
    AudioChannel* channel = System.AudioChannels[this.refID];
    if (_ShouldLeaveAudioAlone(channel)) return;
    channel.Volume = TweenMaths.MaxInt(0, TweenMaths.Lerp(this.fromX, this.toX, amount));
  }
  else if (this.type == _eTweenAudioChannelRoomLocation) {
    AudioChannel* channel = System.AudioChannels[this.refID];
    if (_ShouldLeaveAudioAlone(channel)) return;
    channel.SetRoomLocation(
      TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), 0, Room.Width),
      TweenMaths.ClampInt(TweenMaths.Lerp(this.fromY, this.toY, amount), 0, Room.Height)
      );
  }
  else if (this.type == _eTweenAudioChannelPanning) {
    AudioChannel* channel = System.AudioChannels[this.refID];
    if (_ShouldLeaveAudioAlone(channel)) return;
    channel.Panning = TweenMaths.ClampInt(TweenMaths.Lerp(this.fromX, this.toX, amount), -100, 100);
  }
#endif
}

///////////////////////////////////////////////////////////////////////////////
// Internal Tween Stoppers
///////////////////////////////////////////////////////////////////////////////

function _CleanupTweens() {
  short i = 0;

  while (i < Tween_MAX_INSTANCES) {
    if (_tweens[i].duration != NULL_TWEEN_DURATION) {
      _tweens[i].Step(0.0);
      _tweens[i].duration = NULL_TWEEN_DURATION;
    }

    i++;
  }
}

function _StopTween(short index, TweenStopResult result) {
  if (_tweens[index].duration != NULL_TWEEN_DURATION) {
    if (result == eFinishTween) {
      _tweens[index].Step(1.0);
    }
    else if (result == eResetTween) {
      _tweens[index].Step(0.0);
    }
    
    _tweens[index].duration = NULL_TWEEN_DURATION;
  }
}

function _StopTweens(_TweenReferenceType refType, int refID, TweenStopResult result) {
  short i = 0;
  while (i < Tween_MAX_INSTANCES) {
    if (_tweens[i].refType == refType && _tweens[i].refID == refID) {
      _StopTween(i, result);
    }
    i++;
  }
}

function _StopTweensForGUIControl(GUIControl* guiControlRef, TweenStopResult result) {
  short i = 0;
  while (i < Tween_MAX_INSTANCES) {
    if (_tweens[i].guiControlRef == guiControlRef) {
      _StopTween(i, result);
    }
    i++;
  }
}

///////////////////////////////////////////////////////////////////////////////
// AGS Events
///////////////////////////////////////////////////////////////////////////////

function game_start() {
  // Initialize all the internal tween data on game start
  short i = 0;
  while (i < Tween_MAX_INSTANCES) {
    _tweens[i].duration = NULL_TWEEN_DURATION;
    i++;
  }
}

function repeatedly_execute_always() {
  // Steps through every active tween
  short i = 0;

  _longestTweenDuration = 0.0;
  while (i < Tween_MAX_INSTANCES) {
    if (_tweens[i].duration > 0.0) {
      if (_tweens[i].elapsed < 0.0) {
        // Handle delays.
        _tweens[i].elapsed++;
      }
      else {
        // Compute the amount based on the easingType
        float amount = TweenEasing.GetAmount(
          _tweens[i].elapsed,
          _tweens[i].duration,
          _tweens[i].easingType
          );

        // Update the tween
        _tweens[i].Step(amount);
        _tweens[i].elapsed++;

        // Repeat tween if needed
        if (_tweens[i].elapsed > _tweens[i].duration) {
          if (_tweens[i].style == eRepeatTween) {
            _tweens[i].Restart();
          }
          else if (_tweens[i].style == eReverseRepeatTween) {
            _tweens[i].Reverse();
            _tweens[i].Restart();
          }
          else {
            _tweens[i].duration = NULL_TWEEN_DURATION;
          }
        }
        else {
          _CheckIfIsLongestTween(i);
        }
      }
    }

    i++;
  }
}

function on_event(EventType event, int data) {
  if (event == eEventLeaveRoom) {
    // If the player leaves the room, reset and stop tweens
    _CleanupTweens();
  }
}

///////////////////////////////////////////////////////////////////////////////
// Tween Functions
///////////////////////////////////////////////////////////////////////////////

static function Tween::IncreaseGameSpeed() {
  if (GetGameSpeed() < 60) {
    _gameSpeed = GetGameSpeed();
    SetGameSpeed(60);
  }
}

static function Tween::RestoreGameSpeed() {
  if (_gameSpeed > -1) {
    SetGameSpeed(_gameSpeed);
    _gameSpeed = -1;
  }
}

static function Tween::AlwaysIncreaseGameSpeedOnBlockingTweens(bool value) {
  _increaseGameSpeedOnBlockingTweens = value;
}

static function Tween::StopAll(TweenStopResult result) {
  short i = 0;
  while (i < Tween_MAX_INSTANCES) {
    _StopTween(i, result);
    i++;
  }
}

static function Tween::WaitForAllToFinish() {
  if (_longestTweenDuration > 0.0) {
    Wait(FloatToInt(_longestTweenDuration, eRoundUp));
  }
}

bool Tween::Update() {
  if (this.duration > 0.0) {
    if (this.elapsed < 0.0) {
      // Handle delays.
      this.elapsed++;
    }
    else {
      // Compute the amount based on the easingType
      float amount = TweenEasing.GetAmount(
        this.elapsed,
        this.duration,
        this.easingType
        );

      // Update the tween
      if (this.fromX != this.toX) this.X = TweenMaths.Lerp(this.fromX, this.toX, amount);
      if (this.fromY != this.toY) this.Y = TweenMaths.Lerp(this.fromY, this.toY, amount);
      this.elapsed++;

      // Repeat tween if needed
      if (this.elapsed > this.duration) {
        if (this.style == eRepeatTween) {
          this.Restart();
        }
        else if (this.style == eReverseRepeatTween) {
          this.Reverse();
          this.Restart();
        }
        else {
          this.duration = NULL_TWEEN_DURATION;
        }
      }
    }
    return true;
  }
  
  return false;
}

function Tween::Stop(TweenStopResult result) {
  if (this.duration != NULL_TWEEN_DURATION) {
    if (result == eFinishTween) {
      this.X = FloatToInt(this.toX);
      this.Y = FloatToInt(this.toY);
    }
    else if (result == eResetTween) {
      this.X = FloatToInt(this.fromX);
      this.Y = FloatToInt(this.fromY);
    }
    
    this.duration = NULL_TWEEN_DURATION;
  }
}

bool Tween::IsFinished() {
  return this.duration == NULL_TWEEN_DURATION || this.elapsed > this.duration;
}

float Tween::GetProgress() {
  if (this.elapsed < 0.0) return 0.0;
  if (this.IsFinished()) return 1.0;
  return (this.elapsed / this.duration);
}

///////////////////////////////////////////////////////////////////////////////
// Tween Construction
///////////////////////////////////////////////////////////////////////////////

int _GetAvailableIndexFromTweenObjectArray() {
  short index = -1;
  
  short i = 0;
  while (i < Tween_MAX_INSTANCES && index == -1) {
    if (_tweens[i].duration == NULL_TWEEN_DURATION) {
      index = i;
    }
    i++;
  }

#ifdef DEBUG
  // Let the scripter know that tweens are maxed out, but ignore it completely in the non-debug version.
  _AssertTrue(index >= 0, String.Format("Cannot create new tween because the Tween module is currently playing %d tween(s), which is the maximum. You can increase this max number on the Tween module script header.", Tween_MAX_INSTANCES));
#endif

  return index;
}

int _StartTween(_TweenType type, float amount, short toX, short toY, short fromX, short fromY,
  _TweenReferenceType refType, int refID, GUIControl* guiControlRef, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  
  short index = _GetAvailableIndexFromTweenObjectArray();
#ifdef DEBUG
  // Make sure the index is good. This should not happen to scripters ever.
  _AssertTrue(index >= 0 && index < Tween_MAX_INSTANCES, "Cannot create Tween. Invalid index!");
#endif

  if (_increaseGameSpeedOnBlockingTweens && style == eNoBlockTween) {
    Tween.IncreaseGameSpeed();
  }

  int loops = _tweens[index].Init(amount, fromX, fromY, toX, toY, easingType, style, startDelay, timing);
  _tweens[index].type = type;
  _tweens[index].refType = refType;
  _tweens[index].refID = refID;
  _tweens[index].guiControlRef = guiControlRef;
  
  _CheckIfIsLongestTween(index);

  if (_tweens[index].style == eBlockTween) {
    Wait(loops);
    if (_increaseGameSpeedOnBlockingTweens) {
      Tween.RestoreGameSpeed();
    }
    return 1;
  }

  return loops;
}

///////////////////////////////////////////////////////////////////////////////
// Internal Tween Start Functions
///////////////////////////////////////////////////////////////////////////////

int _StartGUITween(_TweenType type, float amount, short toX, short toY, short fromX, short fromY,
    GUI* guiRef, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartTween(type, amount, toX, toY, fromX, fromY, _eTweenReferenceGUI, guiRef.ID, null, easingType, style, startDelay, timing);
}

int _StartObjectTween(_TweenType type, float amount, short toX, short toY, short fromX, short fromY,
    Object* objectRef, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartTween(type, amount, toX, toY, fromX, fromY, _eTweenReferenceObject, objectRef.ID, null, easingType, style, startDelay, timing);
}

int _StartCharacterTween(_TweenType type, float amount, short toX, short toY, short fromX, short fromY,
    Character* characterRef, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartTween(type, amount, toX, toY, fromX, fromY, _eTweenReferenceCharacter, characterRef.ID, null, easingType, style, startDelay, timing);
}

int _StartRegionTween(_TweenType type, float amount, short toX, short toY, short fromX, short fromY,
    Region* regionRef, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartTween(type, amount, toX, toY, fromX, fromY, _eTweenReferenceRegion, regionRef.ID, null, easingType, style, startDelay, timing);
}

int _StartGUIControlTween(_TweenType type, float amount, short toX, short toY, short fromX, short fromY,
    GUIControl* guiControlRef, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartTween(type, amount, toX, toY, fromX, fromY, _eTweenReferenceGUIControl, 0, guiControlRef, easingType, style, startDelay, timing);
}

int _StartMiscTween(_TweenType type, float amount, short toX, short toY, short fromX, short fromY, int id,
    TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartTween(type, amount, toX, toY, fromX, fromY, _eTweenReferenceMisc, id, null, easingType, style, startDelay, timing);
}

///////////////////////////////////////////////////////////////////////////////
// Tween Extender Functions
///////////////////////////////////////////////////////////////////////////////

// MISC Tweens
int TweenViewportX(float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenViewport, amount, toX, GetViewportY(), GetViewportX(), GetViewportY(), 0, easingType, style, startDelay, timing);
}
int TweenViewportY(float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenViewport, amount, GetViewportX(), toY, GetViewportX(), GetViewportY(), 0, easingType, style, startDelay, timing);
}
int TweenViewport(float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenViewport, amount, toX, toY, GetViewportX(), GetViewportY(), 0, easingType, style, startDelay, timing);
}
int TweenSystemGamma(float amount, short toGamma, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenSystemGamma, amount, toGamma, 0, System.Gamma, 0, 0, easingType, style, startDelay, timing);
}
int TweenShakeScreen(float amount, short fromDelay, short toDelay, short fromAmount, short toAmount, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenShakeScreen, amount, toDelay, toAmount, fromDelay, fromAmount, 0, easingType, style, startDelay, timing);
}
int TweenAreaScaling(float amount, int area, short fromMin, short toMin, short fromMax, short toMax, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenAreaScaling, amount, toMin, toMax, fromMin, fromMax, area, easingType, style, startDelay, timing);
}

// AUDIO Tweens
int TweenSpeechVolume(float amount, short fromVolume, short toVolume, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenSpeechVolume, amount, toVolume, 0, fromVolume, 0, 0, easingType, style, startDelay, timing);
}
#ifndef STRICT_AUDIO
// Pre 3.2 Strict Audio Tweens
int TweenMusicMasterVolume(float amount, short fromVolume, short toVolume, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenMusicMasterVolume, amount, toVolume, 0, fromVolume, 0, 0, easingType, style, startDelay, timing);
}
int TweenDigitalMasterVolume(float amount, short fromVolume, short toVolume, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenDigitalMasterVolume, amount, toVolume, 0, fromVolume, 0, 0, easingType, style, startDelay, timing);
}
int TweenSoundVolume(float amount, short fromVolume, short toVolume, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenSoundVolume, amount, toVolume, 0, fromVolume, 0, 0, easingType, style, startDelay, timing);
}
int TweenChannelVolume(float amount, int channel, short fromVolume, short toVolume, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenChannelVolume, amount, toVolume, 0, fromVolume, 0, channel, easingType, style, startDelay, timing);
}
int TweenChannelFadeOut(float amount, int channel, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return TweenChannelVolume(amount, channel, 100, 0, easingType, style, startDelay, timing);
}
int TweenChannelFadeIn(float amount, int channel, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return TweenChannelVolume(amount, channel, 0, 100, easingType, style, startDelay, timing);
}
int TweenMusicVolume(float amount, short fromVolume, short toVolume, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenMusicVolume, amount, toVolume, 0,  fromVolume, 0, 0, easingType, style, startDelay, timing);
}
int TweenMusicFadeOut(float amount, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return TweenMusicVolume(amount, 100, 0, easingType, style, startDelay, timing);
}
int TweenMusicFadeIn(float amount, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return TweenMusicVolume(amount, 0, 100, easingType, style, startDelay, timing);
}
#endif

// X, Y
int TweenX(this GUI*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUITween(_eTweenGUIPosition, amount, toX, 0, this.X, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this GUI*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUITween(_eTweenGUIPosition, amount, 0, toY, 0, this.Y, this, easingType, style, startDelay, timing);
}
int TweenX(this Object*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartObjectTween(_eTweenObjectPosition, amount, toX, 0, this.X, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this Object*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartObjectTween(_eTweenObjectPosition, amount, 0, toY, 0, this.Y, this, easingType, style, startDelay, timing);
}
int TweenX(this Character*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartCharacterTween(_eTweenCharacterPosition, amount, toX, 0, this.x, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this Character*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartCharacterTween(_eTweenCharacterPosition, amount, 0, toY, 0, this.y, this, easingType, style, startDelay, timing);
}
int TweenX(this GUIControl*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, 0, this.X, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this GUIControl*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, 0, toY, 0, this.Y, this, easingType, style, startDelay, timing);
}
int TweenX(this Label*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, 0, this.X, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this Label*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, 0, toY, 0, this.Y, this, easingType, style, startDelay, timing);
}
int TweenX(this Button*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, 0, this.X, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this Button*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, 0, toY, 0, this.Y, this, easingType, style, startDelay, timing);
}
int TweenX(this Slider*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, 0, this.X, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this Slider*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, 0, toY, 0, this.Y, this, easingType, style, startDelay, timing);
}
int TweenX(this ListBox*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, 0, this.X, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this ListBox*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, 0, toY, 0, this.Y, this, easingType, style, startDelay, timing);
}
int TweenX(this InvWindow*, float amount, short toX, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, 0, this.X, 0, this, easingType, style, startDelay, timing);
}
int TweenY(this InvWindow*, float amount, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, 0, toY, 0, this.Y, this, easingType, style, startDelay, timing);
}

// Position
int TweenPosition(this GUI*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUITween(_eTweenGUIPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this Object*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartObjectTween(_eTweenObjectPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this Character*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartCharacterTween(_eTweenCharacterPosition, amount, toX, toY, this.x, this.y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this GUIControl*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this Label*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this Button*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this TextBox*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this ListBox*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
 return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this Slider*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}
int TweenPosition(this InvWindow*, float amount, short toX, short toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlPosition, amount, toX, toY, this.X, this.Y, this, easingType, style, startDelay, timing);
}

// Transparency
int TweenTransparency(this GUI*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUITween(_eTweenGUITransparency, amount, toTransparency, 0, this.Transparency, 0, this, easingType, style, startDelay, timing);
}
int TweenTransparency(this Object*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartObjectTween(_eTweenObjectTransparency, amount, toTransparency, 0, this.Transparency, 0, this, easingType, style, startDelay, timing);
}
int TweenTransparency(this Character*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartCharacterTween(_eTweenCharacterTransparency, amount, toTransparency, 0, this.Transparency, 0, this, easingType, style, startDelay, timing);
}

// Fade Out/Fade In

int TweenFadeOut(this GUI*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return this.TweenTransparency(amount, 100, easingType, style, startDelay, timing);
}
int TweenFadeIn(this GUI*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return this.TweenTransparency(amount, 0, easingType, style, startDelay, timing);
}
int TweenFadeOut(this Object*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return this.TweenTransparency(amount, 100, easingType, style, startDelay, timing);
}
int TweenFadeIn(this Object*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return this.TweenTransparency(amount, 0, easingType, style, startDelay, timing);
}
int TweenFadeOut(this Character*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return this.TweenTransparency(amount, 100, easingType, style, startDelay, timing);
}
int TweenFadeIn(this Character*, float amount, short toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return this.TweenTransparency(amount, 0, easingType, style, startDelay, timing);
}

// Size
int TweenSize(this GUI*, float amount, short toWidth, short toHeight, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUITween(_eTweenGUISize, amount, toWidth, toHeight, this.Width, this.Height, this, easingType, style, startDelay, timing);
}
int TweenSize(this GUIControl*, float amount, short toWidth, short toHeight, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlSize, amount, toWidth, toHeight, this.Width, this.Height, this, easingType, style, startDelay, timing);
}
int TweenSize(this Label*, float amount, short toWidth, short toHeight, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlSize, amount, toWidth, toHeight, this.Width, this.Height, this, easingType, style, startDelay, timing);
}
int TweenSize(this Button*, float amount, short toWidth, short toHeight, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlSize, amount, toWidth, toHeight, this.Width, this.Height, this, easingType, style, startDelay, timing);
}
int TweenSize(this TextBox*, float amount, short toWidth, short toHeight, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlSize, amount, toWidth, toHeight, this.Width, this.Height, this, easingType, style, startDelay, timing);
}
int TweenSize(this ListBox*, float amount, short toWidth, short toHeight, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlSize, amount, toWidth, toHeight, this.Width, this.Height, this, easingType, style, startDelay, timing);
}
int TweenSize(this Slider*, float amount, short toWidth, short toHeight, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlSize, amount, toWidth, toHeight, this.Width, this.Height, this, easingType, style, startDelay, timing);
}
int TweenSize(this InvWindow*, float amount, short toWidth, short toHeight, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenGUIControlSize, amount, toWidth, toHeight, this.Width, this.Height, this, easingType, style, startDelay, timing);
}

// GUI Specific
int TweenZOrder(this GUI*, float amount, short toZOrder, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUITween(_eTweenGUIZOrder, amount, toZOrder, 0, this.ZOrder, 0, this, easingType, style, startDelay, timing);
}

// Object Specific
int TweenImage(this Object*, Object* tmpObjectRef, float amount, short toSprite, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  tmpObjectRef.Graphic = this.Graphic;
  tmpObjectRef.SetPosition(this.X, this.Y);
  tmpObjectRef.Transparency = 0;
  tmpObjectRef.Visible = true;

  this.Transparency = 100;
  this.Graphic = toSprite;

  if (style == eBlockTween) {
    tmpObjectRef.TweenTransparency(amount, 100, easingType, eNoBlockTween, startDelay, timing);
  }
  else {
    tmpObjectRef.TweenTransparency(amount, 100, easingType, style, startDelay, timing);
  }
  
  return this.TweenTransparency(amount, 0, easingType, style, startDelay, timing);
}

// Character Specific
int TweenAnimationSpeed(this Character*, float amount, short toAnimationSpeed, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartCharacterTween(_eTweenCharacterAnimationSpeed, amount, toAnimationSpeed, 0, this.AnimationSpeed, 0, this, easingType, style, startDelay, timing);
}
int TweenScaling(this Character*, float amount, short toScaling, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  this.ManualScaling = true;
  return _StartCharacterTween(_eTweenCharacterScaling, amount, toScaling, 0, this.Scaling, 0, this, easingType, style, startDelay, timing);
}

// Region Specific
int TweenLightLevel(this Region*, float amount, short toLightLevel, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartRegionTween(_eTweenRegionLightLevel, amount, toLightLevel, 0, this.LightLevel, 0, this, easingType, style, startDelay, timing);
}
int TweenTintRed(this Region*, float amount, short toRed, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartRegionTween(_eTweenRegionTintRed, amount, toRed, 0, this.TintRed, 0, this, easingType, style, startDelay, timing);
}
int TweenTintGreen(this Region*, float amount, short toGreen, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartRegionTween(_eTweenRegionTintGreen, amount, toGreen, 0, this.TintGreen, 0, this, easingType, style, startDelay, timing);
}
int TweenTintBlue(this Region*, float amount, short toBlue, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartRegionTween(_eTweenRegionTintBlue, amount, toBlue, 0, this.TintBlue, 0, this, easingType, style, startDelay, timing);
}
int TweenTintSaturation(this Region*, float amount, short toSaturation, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartRegionTween(_eTweenRegionTintSaturation, amount, toSaturation, 0, this.TintSaturation, 0, this, easingType, style, startDelay, timing);
}
int TweenTint(this Region*, float amount, short toRed, short toGreen, short toBlue, short toSaturation, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  if (style == eBlockTween) {
    this.TweenTintRed(amount, toRed, easingType, eNoBlockTween, startDelay, timing);
    this.TweenTintGreen(amount, toGreen, easingType, eNoBlockTween, startDelay, timing);
    this.TweenTintBlue(amount, toBlue, easingType, eNoBlockTween, startDelay, timing);
  }
  else {
    this.TweenTintRed(amount, toRed, easingType, style, startDelay, timing);
    this.TweenTintGreen(amount, toGreen, easingType, style, startDelay, timing);
    this.TweenTintBlue(amount, toBlue, easingType, style, startDelay, timing);
  }
  
  return this.TweenTintSaturation(amount, toSaturation, easingType, style, startDelay, timing);
}
int TweenTintToGrayscale(this Region*, float amount, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return this.TweenTint(amount, 255, 255, 255, 100, easingType, style, startDelay, timing);
}

// Label Specific
int TweenTextColor(this Label*, float amount, short toColor, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenLabelTextColor, amount, toColor, 0, this.TextColor, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorRed(this Label*, float amount, short toRed, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  short fromRed = TweenGame.GetRFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenLabelTextColorRed, amount, toRed, 0, fromRed, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorGreen(this Label*, float amount, short toGreen, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  short fromGreen = TweenGame.GetGFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenLabelTextColorGreen, amount, toGreen, 0, fromGreen, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorBlue(this Label*, float amount, short toBlue, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  short fromBlue = TweenGame.GetBFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenLabelTextColorBlue, amount, toBlue, 0, fromBlue, 0, this, easingType, style, startDelay, timing);
}

// Button Specific
int TweenTextColor(this Button*, float amount, short toColor, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenButtonTextColor, amount, toColor, 0, this.TextColor, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorRed(this Button*, float amount, short toRed, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  short fromRed = TweenGame.GetRFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenButtonTextColorRed, amount, toRed, 0, fromRed, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorGreen(this Button*, float amount, short toGreen, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  short fromGreen = TweenGame.GetGFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenButtonTextColorGreen, amount, toGreen, 0, fromGreen, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorBlue(this Button*, float amount, short toBlue, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  short fromBlue = TweenGame.GetRFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenButtonTextColorBlue, amount, toBlue, 0, fromBlue, 0, this, easingType, style, startDelay, timing);
}

// ListBox Specific
int TweenSelectedIndex(this ListBox*, float amount, short toSelectedIndex, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenListBoxSelectedIndex, amount, toSelectedIndex, 0, this.SelectedIndex, 0, this, easingType, style, startDelay, timing);
}
int TweenTopItem(this ListBox*, float amount, short toTopItem, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenListBoxTopItem, amount, toTopItem, 0, this.TopItem, 0, this, easingType, style, startDelay, timing);
}

// InvWindow Specific
int TweenTopItem(this InvWindow*, float amount, short toTopItem, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenInvWindowTopItem, amount, toTopItem, 0, this.TopItem, 0, this, easingType, style, startDelay, timing);
}

// Slider Specific
int TweenValue(this Slider*, float amount, short toValue, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
 return _StartGUIControlTween(_eTweenSliderValue, amount, toValue, 0, this.Value, 0, this, easingType, style, startDelay, timing);
}

// Stop
function StopAllTweens(this GUI*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUI, this.ID, result);
}
function StopAllTweens(this Object*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceObject, this.ID, result);
}
function StopAllTweens(this Character*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceCharacter, this.ID, result);
}
function StopAllTweens(this Region*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceRegion, this.ID, result);
}
function StopAllTweens(this GUIControl*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUIControl, this.ID, result);
}
function StopAllTweens(this Label*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUIControl, this.ID, result);
}
function StopAllTweens(this Button*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUIControl, this.ID, result);
}
function StopAllTweens(this TextBox*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceGUIControl, this.ID, result);
}
function StopAllTweens(this ListBox*, TweenStopResult result) {
  _StopTweensForGUIControl(this, result);
}
function StopAllTweens(this Slider*, TweenStopResult result) {
  _StopTweensForGUIControl(this, result);
}
function StopAllTweens(this InvWindow*, TweenStopResult result) {
  _StopTweensForGUIControl(this, result);
}

#ifver 3.1
// TextBox 3.1+ Specific
int TweenTextColor(this TextBox*, float amount, short toColor, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenTextBoxTextColorRed, amount, toColor, 0, this.TextColor, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorRed(this TextBox*, float amount, short toRed, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  int fromRed = TweenGame.GetRFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenTextBoxTextColorRed, amount, toRed, 0, fromRed, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorGreen(this TextBox*, float amount, short toGreen, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  int fromGreen = TweenGame.GetGFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenTextBoxTextColorGreen, amount, toGreen, 0, fromGreen, 0, this, easingType, style, startDelay, timing);
}
int TweenTextColorBlue(this TextBox*, float amount, short toBlue, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  int fromBlue = TweenGame.GetBFromColor(this.TextColor);
  return _StartGUIControlTween(_eTweenTextBoxTextColorBlue, amount, toBlue, 0, fromBlue, 0, this, easingType, style, startDelay, timing);
}

// Slider 3.1+ Specific
int TweenHandleOffset(this Slider*, float amount, short toHandleOffset, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartGUIControlTween(_eTweenSliderHandleOffset, amount, toHandleOffset, 0, this.HandleOffset, 0, this, easingType, style, startDelay, timing);
}
#endif

#ifdef STRICT_AUDIO
// 3.2+ Strict Audio Specific
int _StartAudioTween(_TweenType type, AudioChannel* audioChannelRef, float amount, short toX, short toY, short fromX, short fromY,
    TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartTween(type, amount, toX, toY, fromX, fromY, _eTweenReferenceAudioChannel, audioChannelRef.ID, null, easingType, style, startDelay, timing);
}
int TweenSystemVolume(float amount, short toVolume, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartMiscTween(_eTweenSystemVolume, amount, TweenMaths.ClampInt(toVolume, 0, 100), 0, System.Volume, 0, 0, easingType, style, startDelay, timing);
}
int TweenPanning(this AudioChannel*,  float amount, short toPanning, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartAudioTween(_eTweenAudioChannelPanning, this, amount, TweenMaths.ClampInt(toPanning, -100,  100), 0, this.Panning, 0, easingType, style, startDelay, timing);
}
int TweenVolume(this AudioChannel*,  float amount, short toVolume, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartAudioTween(_eTweenAudioChannelVolume, this, amount, TweenMaths.ClampInt(toVolume, 0, 100), 0, this.Volume, 0, easingType, style, startDelay, timing);
}
int TweenFadeOut(this AudioChannel*, float amount, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return this.TweenVolume(amount, 0, easingType, style, startDelay, timing);
}
int TweenFadeIn(this AudioChannel*, float amount, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) { 
  return this.TweenVolume(amount, 100, easingType, style, startDelay, timing);
}
int TweenRoomLocation(this AudioChannel*,  float amount, short toX, short toY, short fromX, short fromY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTiming timing) {
  return _StartAudioTween(_eTweenAudioChannelRoomLocation, this, amount, toX, toY, fromX, fromY, easingType, style, startDelay, timing);
}
function StopAllTweens(this AudioChannel*, TweenStopResult result) {
  _StopTweens(_eTweenReferenceAudioChannel, this.ID, result);
}
#endif