// room 102 (GUI Control Tests) script file

#ifdef SCRIPT_API_v350
int _lstSelectedBackColor, _lstSelectedTextColor, _lstTextColor;

int UpdateRedInColor(int color, int red) {
  return Game.GetColorFromRGB(red, TweenGame.GetGFromColor(color), TweenGame.GetBFromColor(color));
}

int UpdateGreenInColor(int color, int green) {
  return Game.GetColorFromRGB(TweenGame.GetRFromColor(color), green, TweenGame.GetBFromColor(color));
}

int UpdateBlueInColor(int color, int blue) {
  return Game.GetColorFromRGB(TweenGame.GetRFromColor(color), TweenGame.GetGFromColor(color), blue);
}

int UpdateRedInSelectedBackColor(int red) { return UpdateRedInColor(_lstSelectedBackColor, red); }
int UpdateGreenInSelectedBackColor(int green) { return UpdateGreenInColor(_lstSelectedBackColor, green); }
int UpdateBlueInSelectedBackColor(int blue) { return UpdateBlueInColor(_lstSelectedBackColor, blue); }

int UpdateRedInSelectedTextColor(int red) { return UpdateRedInColor(_lstSelectedTextColor, red); }
int UpdateGreenInSelectedTextColor(int green) { return UpdateGreenInColor(_lstSelectedTextColor, green); }
int UpdateBlueInSelectedTextColor(int blue) { return UpdateBlueInColor(_lstSelectedTextColor, blue); }

int UpdateRedInTextColor(int red) { return UpdateRedInColor(_lstTextColor, red); }
int UpdateGreenInTextColor(int green) { return UpdateGreenInColor(_lstTextColor, green); }
int UpdateBlueInTextColor(int blue) { return UpdateBlueInColor(_lstTextColor, blue); }
#endif

function SaveGUIControls() {
  #ifdef SCRIPT_API_v350
  _lstSelectedBackColor = lstTest.SelectedBackColor;
  _lstSelectedTextColor = lstTest.SelectedTextColor;
  _lstTextColor = lstTest.TextColor;
  #endif
}

function RestoreGUIControls() {
  #ifdef SCRIPT_API_v350
  lstTest.SelectedBackColor = _lstSelectedBackColor;
  lstTest.SelectedTextColor = _lstSelectedTextColor;
  lstTest.TextColor = _lstTextColor;
  #endif
}

function testListBoxSelectedBackColor() {
  #ifdef SCRIPT_API_v350
  SaveGUIControls();
  Test("ListBox.SelectedBackColor");

  int expectedColor = UpdateRedInSelectedBackColor(128);
  lstTest.TweenSelectedBackColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInSelectedBackColor(128);
  lstTest.TweenSelectedBackColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInSelectedBackColor(128);
  lstTest.TweenSelectedBackColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  lstTest.TweenSelectedBackColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, toColor, "Color");

  RestoreGUIControls();

  lstTest.TweenSelectedBackColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedBackColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInSelectedBackColor(128);
  int lerpColor = Game.GetColorFromRGB(
    TweenMaths.ClampInt(0, TweenMaths.Lerp(IntToFloat(TweenGame.GetRFromColor(lstTest.SelectedBackColor)), 128.0, 1.0), 255),
    TweenGame.GetGFromColor(lstTest.SelectedBackColor),
    TweenGame.GetBFromColor(lstTest.SelectedBackColor)
  );
  lstTest.TweenSelectedBackColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColorRed(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInSelectedBackColor(128);
  lstTest.TweenSelectedBackColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColorGreen(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInSelectedBackColor(128);
  lstTest.TweenSelectedBackColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColorBlue(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, expectedColor, "B Finish");

  RestoreGUIControls();

  lstTest.TweenSelectedBackColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColor(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, toColor, "Color Finish");

  RestoreGUIControls();

  lstTest.TweenSelectedBackColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedBackColor(eFinishTween);
  ExpectIntToBe(lstTest.SelectedBackColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
  #endif
}

function testListBoxSelectedTextColor() {
  #ifdef SCRIPT_API_v350
  SaveGUIControls();
  Test("ListBox.SelectedTextColor");

  int expectedColor = UpdateRedInSelectedTextColor(128);
  lstTest.TweenSelectedTextColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInSelectedTextColor(128);
  lstTest.TweenSelectedTextColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInSelectedTextColor(128);
  lstTest.TweenSelectedTextColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  lstTest.TweenSelectedTextColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, toColor, "Color");

  RestoreGUIControls();

  lstTest.TweenSelectedTextColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(lstTest.SelectedTextColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInSelectedTextColor(128);
  int lerpColor = Game.GetColorFromRGB(
    TweenMaths.ClampInt(0, TweenMaths.Lerp(IntToFloat(TweenGame.GetRFromColor(lstTest.SelectedTextColor)), 128.0, 1.0), 255),
    TweenGame.GetGFromColor(lstTest.SelectedTextColor),
    TweenGame.GetBFromColor(lstTest.SelectedTextColor)
  );
  lstTest.TweenSelectedTextColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColorRed(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInSelectedTextColor(128);
  lstTest.TweenSelectedTextColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColorGreen(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInSelectedTextColor(128);
  lstTest.TweenSelectedTextColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColorBlue(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, expectedColor, "B Finish");

  RestoreGUIControls();

  lstTest.TweenSelectedTextColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColor(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, toColor, "Color Finish");

  RestoreGUIControls();

  lstTest.TweenSelectedTextColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenSelectedTextColor(eFinishTween);
  ExpectIntToBe(lstTest.SelectedTextColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
  #endif
}

function testListBoxTextColor() {
  #ifdef SCRIPT_API_v350
  SaveGUIControls();
  Test("ListBox.TextColor");

  int expectedColor = UpdateRedInTextColor(128);
  lstTest.TweenTextColorRed(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "Red");

  RestoreGUIControls();

  expectedColor = UpdateGreenInTextColor(128);
  lstTest.TweenTextColorGreen(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "Green");

  RestoreGUIControls();

  expectedColor = UpdateBlueInTextColor(128);
  lstTest.TweenTextColorBlue(0.5, 128, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "Blue");

  RestoreGUIControls();

  int toColor = Game.GetColorFromRGB(64, 128, 255);

  lstTest.TweenTextColor(0.5, toColor, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, toColor, "Color");

  RestoreGUIControls();

  lstTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseInBackTween);
  ExpectIntToBe(lstTest.TextColor, toColor, "ColorRGB");

  RestoreGUIControls();

  expectedColor = UpdateRedInTextColor(128);
  int lerpColor = Game.GetColorFromRGB(
    TweenMaths.ClampInt(0, TweenMaths.Lerp(IntToFloat(TweenGame.GetRFromColor(lstTest.TextColor)), 128.0, 1.0), 255),
    TweenGame.GetGFromColor(lstTest.TextColor),
    TweenGame.GetBFromColor(lstTest.TextColor)
  );
  lstTest.TweenTextColorRed(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColorRed(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "R Finish");

  RestoreGUIControls();

  expectedColor = UpdateGreenInTextColor(128);
  lstTest.TweenTextColorGreen(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColorGreen(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "G Finish");

  RestoreGUIControls();

  expectedColor = UpdateBlueInTextColor(128);
  lstTest.TweenTextColorBlue(0.5, 128, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColorBlue(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, expectedColor, "B Finish");

  RestoreGUIControls();

  lstTest.TweenTextColor(0.5, toColor, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, toColor, "Color Finish");

  RestoreGUIControls();

  lstTest.TweenTextColorRGB(0.5, 64, 128, 255, eEaseLinearTween, eNoBlockTween);
  lstTest.StopTweenTextColor(eFinishTween);
  ExpectIntToBe(lstTest.TextColor, toColor, "ColorRGB Finish");

  RestoreGUIControls();
  #endif
}

function room_AfterFadeIn()
{
  testListBoxSelectedBackColor();
  testListBoxSelectedTextColor();
  testListBoxTextColor();
  player.ChangeRoom(99);
}

function room_Load()
{
  gControlsTest.Visible = true;
}

function room_FirstLoad()
{
  SaveGUIControls();
  lstTest.FillDirList("*");
  lstTest.SelectedIndex = lstTest.ItemCount - 1;
}

function room_Leave()
{
  RestoreGUIControls();
  gControlsTest.Visible = false;
}

function room_RepExec()
{

}
